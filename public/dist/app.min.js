"use strict";var account=angular.module("account",["ngResource","ngRoute","reCAPTCHA","nya.bootstrap.select"]).value("toastr",toastr);account.run(function($rootScope,$location){$rootScope.$on("$routeChangeError",function(ev,current,previous,rejection){"not authorized"===rejection&&$location.path("/404")})});var app=angular.module("app",["account","ngResource","ngRoute","reCAPTCHA","nya.bootstrap.select","oc.lazyLoad"]).value("toastr",toastr);app.run(function($rootScope,$location){$rootScope.$on("$routeChangeError",function(ev,current,previous,rejection){"not authorized"===rejection&&$location.path("/404")})}),app.config(function($locationProvider,reCAPTCHAProvider){$locationProvider.html5Mode({enabled:!0,requireBase:!1}),reCAPTCHAProvider.setPublicKey("6Lcy4csSAAAAAFdcvcxawMgzlJCabD0G5bk5lp2U"),reCAPTCHAProvider.setOptions({theme:"clean"})}),app.config(function($routeProvider){var routeUserChecks={adminRole:{authenticate:function(User){return User.isAuthorizedForRole("admin")}},librarianRole:{authenticate:function(User){return User.isAuthorizedForRole("librarian")}},libraryOwnerRole:{authenticate:function(User){return User.isAuthorizedForRole("libraryOwner")}},authenticated:{authenticate:function(User){return User.isAuthenticated()}}};$routeProvider.when("/admin",{templateUrl:"/partials/admin-panel/settings",controller:"AdminPanelCtrl",resolve:routeUserChecks.adminRole}).when("/admin/users",{templateUrl:"/partials/admin-panel/users/users-list",controller:"UserListCtrl",resolve:routeUserChecks.adminRole}).when("/admin/user/:id",{templateUrl:"/partials/admin-panel/users/users-info",controller:"UserInfoCtrl",resolve:routeUserChecks.adminRole}).when("/admin/users/add",{templateUrl:"/partials/admin-panel/users/user-add",controller:"addUserAdminCtrl",resolve:routeUserChecks.adminRole}).when("/admin/user/edit/:id",{templateUrl:"/partials/admin-panel/users/user-edit",controller:"editProfileAdminCtrl",resolve:routeUserChecks.adminRole}).when("/admin/user/delete/:id",{templateUrl:"/partials/admin-panel/users/user-delete",controller:"UserDeleteCtrl",resolve:routeUserChecks.adminRole}).when("/admin/libraries",{templateUrl:"/partials/admin-panel/libraries/libraries-list",controller:"LibraryListCtrl",resolve:routeUserChecks.adminRole}).when("/admin/libraries/add",{templateUrl:"/partials/admin-panel/libraries/library-add",controller:"AddLibraryCtrl",resolve:routeUserChecks.adminRole}).when("/admin/libraries/add/librarians",{templateUrl:"/partials/admin-panel/libraries/library-add-librarians",controller:"AddLibraryCtrl",resolve:routeUserChecks.adminRole}).when("/admin/libraries/users/:id",{templateUrl:"/partials/admin-panel/libraries/library-users",controller:"LibraryUsersCtrl",resolve:routeUserChecks.adminRole}).when("/admin/library/:id",{templateUrl:"/partials/admin-panel/libraries/libraries-info",controller:"LibraryInfoCtrl",resolve:routeUserChecks.adminRole}).when("/librarian/library/:id",{templateUrl:"/partials/admin-panel/libraries/libraries-info",controller:"LibraryInfoCtrl",resolve:routeUserChecks.adminRole}).when("/admin/library/edit/:id",{templateUrl:"/partials/admin-panel/libraries/library-edit",controller:"editLibraryAdminCtrl",resolve:routeUserChecks.adminRole}).when("/admin/library/delete/:id",{templateUrl:"/partials/admin-panel/libraries/library-delete",controller:"LibraryDeleteCtrl",resolve:routeUserChecks.adminRole}).when("/admin/books",{templateUrl:"/partials/admin-panel/books/books-list",controller:"BookListCtrl",resolve:routeUserChecks.adminRole}).when("/admin/book/:id",{templateUrl:"/partials/admin-panel/books/books-info",controller:"BookInfoCtrl",resolve:routeUserChecks.adminRole}).when("/admin/books/add",{templateUrl:"/partials/admin-panel/books/book-add",controller:"AddBookCtrl",resolve:routeUserChecks.adminRole}).when("/admin/book/edit/:id",{templateUrl:"/partials/admin-panel/books/book-edit",controller:"editBookAdminCtrl",resolve:routeUserChecks.adminRole}).when("/admin/book/delete/:id",{templateUrl:"/partials/admin-panel/books/book-delete",controller:"BookDeleteCtrl",resolve:routeUserChecks.adminRole})}),app.config(function($routeProvider){$routeProvider.when("/",{templateUrl:"/partials/main/home",controller:"MainCtrl"}).when("/libraries",{templateUrl:"/partials/libraries/libraries-list",controller:"LibrariesListCtrl"}).when("/libraries/:id",{templateUrl:"/partials/libraries/library-details",controller:"LibraryDetailsPageCtrl"}).when("/book/:id",{templateUrl:"/partials/books/book-details",controller:"BookDetailsCtrl"}).when("/book/:id/:libraryID",{templateUrl:"/partials/books/book-details",controller:"BookDetailsCtrl"}).when("/404",{templateUrl:"/partials/account/log-in"}).otherwise({redirectTo:"/404"})}),app.config(function($routeProvider){var routeUserChecks={adminRole:{authenticate:function(User){return User.isAuthorizedForRole("admin")}},librarianRole:{authenticate:function(User){return User.isAuthorizedForRole("librarian")}},libraryOwnerRole:{authenticate:function(User){return User.isAuthorizedForRole("libraryOwner")}},authenticated:{authenticate:function(User){return User.isAuthenticated()}}};$routeProvider.when("/libraryPanel",{templateUrl:"/partials/library-panel/panel",controller:"LibraryPanelCtrl",resolve:routeUserChecks.librarianRole}).when("/libraryPanel/library-details",{templateUrl:"/partials/library-panel/settings/library-details",controller:"LibraryDetailsCtrl",resolve:routeUserChecks.librarianRole}).when("/libraryPanel/books/add",{templateUrl:"/partials/library-panel/books/book-add",controller:"LibraryAddBookCtrl",resolve:routeUserChecks.librarianRole}).when("/libraryPanel/bookInfo/:id",{templateUrl:"/partials/library-panel/books/books-info",controller:"BookInfoCtrl",resolve:routeUserChecks.librarianRole}).when("/libraryPanel/books-library",{templateUrl:"/partials/library-panel/books/books-list",controller:"LibraryBooksListCtrl",resolve:routeUserChecks.librarianRole}).when("/libraryPanel/books/search",{templateUrl:"/partials/library-panel/books/books-search",controller:"LibraryBooksSearchCtrl",resolve:routeUserChecks.librarianRole}).when("/libraryPanel/book/edit/:id",{templateUrl:"/partials/library-panel/books/book-edit",controller:"EditBookLibraryCtrl",resolve:routeUserChecks.librarianRole}).when("/libraryPanel/book/delete/:id",{templateUrl:"/partials/library-panel/books/book-delete",controller:"LibraryBookDeleteCtrl",resolve:routeUserChecks.librarianRole}).when("/libraryPanel/users",{templateUrl:"/partials/library-panel/users/users-list",controller:"LibraryUsersCtrl",resolve:routeUserChecks.librarianRole}).when("/libraryPanel/users/add",{templateUrl:"/partials/library-panel/users/user-add",controller:"AddUserToLibraryCtrl",resolve:routeUserChecks.librarianRole}).when("/libraryPanel/userInfo/:id",{templateUrl:"/partials/library-panel/users/user-info",controller:"UserInfoLibraryCtrl",resolve:routeUserChecks.librarianRole}).when("/libraryPanel/user/interact/:id",{templateUrl:"/partials/library-panel/users/user-interact",controller:"UserInteractLibraryCtrl",resolve:routeUserChecks.librarianRole}).when("/libraryPanel/user/delete/:id",{templateUrl:"/partials/library-panel/users/user-delete",controller:"UserDeleteFromLibraryCtrl",resolve:routeUserChecks.librarianRole}).when("/libraryPanel/users/book-requests",{templateUrl:"/partials/library-panel/users/book-requests",controller:"BookingRequestsCtrl",resolve:routeUserChecks.librarianRole})}),app.config(function($routeProvider){var routeUserChecks={adminRole:{authenticate:function(User){return User.isAuthorizedForRole("admin")}},librarianRole:{authenticate:function(User){return User.isAuthorizedForRole("librarian")}},libraryOwnerRole:{authenticate:function(User){return User.isAuthorizedForRole("libraryOwner")}},authenticated:{authenticate:function(User){return User.isAuthenticated()}}};$routeProvider.when("/signup",{templateUrl:"/partials/account/sign-up",resolve:{lazy:["$ocLazyLoad",function($ocLazyLoad){return $ocLazyLoad.load([{name:"account",files:["scripts/controllers/account/signUpCtrl.js"]}])}]}}).when("/login",{templateUrl:"/partials/account/log-in",resolve:{lazy:["$ocLazyLoad",function($ocLazyLoad){return $ocLazyLoad.load([{name:"account",files:["scripts/controllers/account/logInCtrl.js"]}])}]}}).when("/profile",{templateUrl:"/partials/account/profile",controller:"ProfileCtrl",resolve:routeUserChecks.authenticated}).when("/profile/edit",{templateUrl:"/partials/account/edit-profile",controller:"EditProfileCtrl",resolve:routeUserChecks.authenticated})}),app.controller("EditProfileCtrl",function($scope,$location,User,identity,ajaxPost,$window,$http,notifier){$scope.user={username:identity.currentUser.username,firstName:identity.currentUser.firstName,lastName:identity.currentUser.lastName,email:identity.currentUser.email,avatar:identity.currentUser.avatar,gender:identity.currentUser.gender,dateOfBirth:identity.currentUser.dateOfBirth,facebookUrl:identity.currentUser.facebookUrl,twitterUrl:identity.currentUser.twitterUrl,googlePlusUrl:identity.currentUser.googlePlusUrl,aboutMe:identity.currentUser.aboutMe},$scope.upload=!1,$scope.emailConfirm=$scope.user.email,$scope.update=function(user){console.log("the ctrl"),User.update(user).then(function(){$scope.user=user,$location.path("/profile"),notifier.success("Profile updated!")},function(reason){notifier.error(reason)})},$scope.setFileEventListener=function(element){$scope.uploadedFile=element.files[0],$scope.uploadedFile&&$scope.$apply(function(){$scope.uploadButtonState=!0})},$scope.uploadFile=function(){$scope.uploadedFile&&ajaxPost.uploadFileInit($scope.uploadedFile).then(function(result){200===result.status&&($scope.user.avatar=result.data,$scope.avatarUploadSuccessful=!0,$scope.avatarUploadError=!1,$scope.avatarTypeError=!1)},function(error){console.log(error),"Invalid mime type"===error.data?$scope.avatarTypeError=!0:$scope.avatarUploadError=!0,$scope.avatarError=error.data})},$scope.checkIfTaken=function(field){var responsePromise=$http.get("/api/"+field.$name+"Taken/"+field.$viewValue);responsePromise.success(function(data){data===!0?field.$setValidity("taken",!1):field.$setValidity("taken",!0)})},$scope.fieldsMatch=function(field,confirmField){field.$viewValue!==confirmField.$viewValue?confirmField.$setValidity("notMatching",!1):confirmField.$setValidity("notMatching",!0)}}),account.controller("LogInCtrl",function($scope,$location,notifier,identity,User,$window){$scope.identity=identity,$scope.login=function(user){User.login(user).then(function(success){success?(notifier.success("Successful login!"),$location.path("/")):(notifier.error("Username/Password combination is not valid or the RECAPTCHA Challenge is not complete!"),$window.Recaptcha.reload())})},$scope.logout=function(){User.logout().then(function(){notifier.success("Successful logout!"),$scope.user&&($scope.user.username="",$scope.user.password=""),$location.path("/")})}}),account.controller("ProfileCtrl",function($scope,identity){$scope.user=identity.currentUser}),account.controller("SignUpCtrl",function($scope,$location,User,notifier,$http,$window){$scope.signup=function(user){User.signup(user).then(function(){notifier.success("Registration successful!"),$location.path("/")},function(reason){notifier.error(reason),$window.Recaptcha.reload()})},$scope.checkIfTaken=function(field){var responsePromise=$http.get("/api/"+field.$name+"Taken/"+field.$viewValue);responsePromise.success(function(data){data===!0?field.$setValidity("taken",!1):field.$setValidity("taken",!0)})},$scope.passwordMatch=function(password,confirmPassword){password.$viewValue!==confirmPassword.$viewValue?confirmPassword.$setValidity("notMatching",!1):confirmPassword.$setValidity("notMatching",!0)}}),app.controller("AdminPanelCtrl",function($scope,$location,identity){$scope.identity=identity,$scope.path=$location.path(),$scope.menu=[{name:"libraries",links:{add:"/admin/libraries/add",browse:"/admin/libraries",search:"/admin/libraries/search"}},{name:"books",links:{add:"/admin/books/add",browse:"/admin/books",search:"/admin/books/search-library"}},{name:"users",links:{add:"/admin/users/add",browse:"/admin/users",search:"/admin/users/search"}}],$scope.getCurrentMenuItem=function(path){for(var i=0;i<$scope.menu.length;i++)for(var key in $scope.menu[i].links)if($scope.menu[i].links[key]===path)return $scope.menu[i].name;return""},$scope.currentMenuItem=$scope.getCurrentMenuItem($scope.path)}),app.controller("AddBookCtrl",function($scope,$window,$http,$location,$anchorScroll,Book,bookSearch,notifier,ajaxPost){$scope.displayForm=!1,$http({method:"get",url:"/api/genres"}).success(function(data){console.log(data),$scope.genres=data}).error(function(err){console.log(err)}),$scope.page=1,$scope.perPage=3,$scope.field="_id",$scope.range=function(n){return new Array(n)},$scope.getPagesCount=function(){return $scope.booksCount=$scope.books.length,$scope.pagesCount=Math.ceil($scope.booksCount/$scope.perPage),$scope.pagesCount},$scope.setPage=function(page,event){$scope.page=page,$anchorScroll(),angular.element(".pagination li").removeClass("active"),angular.element("#"+event.target.id).parent().addClass("active")},$scope.setPerPage=function(perPage){$scope.perPage=perPage};var fieldsOptions=new Array,fieldsOptionsCopy=new Array;$scope.fields=new Array,$scope.matches=new Array,fieldsOptions.push("isbn"),fieldsOptions.push("title"),fieldsOptions.push("author"),fieldsOptions.push("description"),fieldsOptions.push("publisher"),fieldsOptions.push("cover"),fieldsOptions.push("authorNationality"),fieldsOptions.push("language"),fieldsOptions.push("pages"),fieldsOptions.push("themes"),fieldsOptions.push("genres"),fieldsOptions.push("edition"),fieldsOptions.push("illustrated"),fieldsOptions.push("published"),fieldsOptionsCopy=fieldsOptions;for(var i=0;10>i;i++)$scope.fields.push(fieldsOptions);$scope.updateSelections=function(key,value){$scope.matches[key]=value;for(var i=0;i<Object.keys($scope.csv.result[0]).length;i++){$scope.fields[i]=[];for(var j=0;j<fieldsOptionsCopy.length;j++)$scope.matches.indexOf(fieldsOptionsCopy[j])>=0||$scope.fields[i].push(fieldsOptionsCopy[j])}$scope.matches.forEach(function(element,index){$scope.fields[index].push(element)})},$scope.showCSVForms=function(includeTopRow){$scope.books=new Array;var i,b=-1;for(console.log(includeTopRow),i="true"===includeTopRow?0:1;i<$scope.csv.result.length;i++){b++,$scope.books[b]=new Object({});for(var j=0;j<$scope.csv.result[i].length;j++)"undefined"!=typeof $scope.matches[j]&&($scope.books[b][$scope.matches[j]]=$scope.csv.result[i][j])}$scope.displayForm=!0,$anchorScroll()},$scope.removeBookForm=function(index){$scope.books.splice(index,1),notifier.success("Book Form removed successfully!"),$scope.books.length<1&&($scope.displayForm=!1,$scope.csv=!1,$scope.searchState=void 0)},$scope.addBook=function(book,index){Book.add(book).then(function(){notifier.success("Book added successfully!"),$scope.books.splice(index,1),$scope.books.length<1&&($window.location.href="/admin/books")},function(reason){notifier.error(reason)})},$scope.newForm=function(){$scope.books=new Array,$scope.books[0]=new Object({}),$scope.displayForm=!0,$scope.searchState=void 0},$scope.findBook=function(){var bookPromise=bookSearch.search($scope.ISBNSearch);bookPromise.then(function(data){$scope.books=new Array,data.isbn=$scope.ISBNSearch.replace(/-/gi,""),$scope.books[0]=data,$scope.displayForm=!0,$scope.searchState=!0},function(){$scope.searchState=!1,console.log("not found")})},$scope.setFileEventListener=function(element){void 0==$scope.books&&($scope.books[0]=new Object({})),$scope.uploadedFile=element.files[0],$scope.uploadedFile&&$scope.$apply(function(){$scope.uploadButtonState=!0})},$scope.uploadFile=function(index){$scope.uploadedFile&&ajaxPost.uploadFileInit($scope.uploadedFile).then(function(result){200===result.status&&($scope.books[index].cover=result.data,$scope.coverUploadSuccessful=!0,$scope.coverUploadError=!1,$scope.coverTypeError=!1)},function(error){"Invalid mime type"===error.data?$scope.coverTypeError=!0:$scope.coverUploadError=!0,$scope.coverError=error.data})}}),app.controller("BookDeleteCtrl",function($scope,$routeParams,$http,$location,notifier){$http.get("/api/book/delete/"+$routeParams.id).success(function(){notifier.success("The book has been successfully deleted.")}),$location.path("/admin/books")}),app.controller("BookInfoCtrl",function($scope,BookResource,$routeParams){$scope.bookInfo=BookResource.get({id:$routeParams.id})}),app.controller("BookListCtrl",function($scope,BookResourceSortable,$routeParams,$http){$scope.page=1,$scope.perPage=10,$scope.field="_id",$scope.order="asc",$scope.range=function(n){return new Array(n)},$scope.pages=function(){$http.get("/api/book/count").success(function(data){$scope.booksCount=parseInt(data),$scope.pagesCount=Math.ceil($scope.booksCount/$scope.perPage)})},$scope.books=BookResourceSortable.query({field:$scope.field,order:$scope.order,page:$scope.page,perPage:$scope.perPage}),$scope.setPage=function(page,event){$scope.page=page,angular.element(".pagination li").removeClass("active"),angular.element("#"+event.target.id).parent().addClass("active")},$scope.setPerPage=function(perPage){$scope.perPage=perPage},$scope.sort=function(event){$scope.field=event.target.id,$scope.order=$scope.order="asc"===$scope.order?"desc":"asc"},$scope.reloadBooks=function(){$scope.books=BookResourceSortable.query({field:$scope.field,order:$scope.order,page:$scope.page,perPage:$scope.perPage})}}),app.controller("BooksListCtrl",function($scope,cachedBooks){$scope.books=cachedBooks.query()}),app.controller("editBookAdminCtrl",function($scope,$location,$http,Book,ajaxPost,BookResource,$routeParams){$scope.book=BookResource.get({id:$routeParams.id}),$http({method:"get",url:"/api/genres"}).success(function(data){$scope.genres=data}).error(function(err){console.log(err)}),$scope.updateBookAsAdmin=function(book){Book.updateAsAdmin(book).then(function(){$location.path("/admin/books")})}}),app.controller("AddLibraryCtrl",function($scope,$http,$window,Library,User,notifier,UserResource,ajaxPost){$scope.addLibrary=function(library,librarians){for(var i=0;i<librarians.length;i++)librarians[i].roles=[],librarians[i].roles.push("librarian");if(console.log(library.librarians),library.hasOwnProperty("librarians"))for(var i=0;i<library.librarians.length;i++)for(var j=0;j<$scope.users.length;j++)$scope.users[j]._id===library.librarians[i]&&($scope.users[j].roles.push("librarian"),User.updateAsAdmin($scope.users[j]));Library.addLibrary(library,librarians).finally(function(){notifier.success("Library added successfully!"),$window.location.href="/admin/libraries"})},$http({method:"get",url:"/api/countries"}).success(function(data){$scope.countries=data}).error(function(err){console.log(err)}),$http({method:"get",url:"/api/users"}).success(function(data){$scope.users=new Array;var b=0;for(var user in data)""!==data[user].ownLibraryID&&data[user].ownLibraryID||($scope.users[b]=data[user],b++)}).error(function(err){console.log(err)}),$scope.setFileEventListener=function(element){$scope.uploadedFile=element.files[0],void 0==$scope.library&&($scope.library=new Object({})),$scope.library.active=!0,$scope.uploadedFile&&$scope.$apply(function(){$scope.uploadButtonState=!0})},$scope.uploadFile=function(){$scope.uploadedFile&&ajaxPost.uploadFileInit($scope.uploadedFile).then(function(result){200===result.status&&($scope.library.certificate=result.data,$scope.certificateUploadSuccessful=!0,$scope.certificateUploadError=!1,$scope.certificateTypeError=!1,$scope.uploadButtonState=!0,$scope.uploadedFile=!0),console.log(result),console.log($scope.uploadButtonState),console.log($scope.uploadedFile)},function(error){console.log(error),"Invalid mime type"===error.data?$scope.certificateTypeError=!0:$scope.certificateUploadError=!0,$scope.certificateError=error.data})},$scope.librariansCount=0,$scope.librarians=new Array;for(var i=0;i<$scope.librariansCount;i++)$scope.librarians[i]=new Object({index:i});$scope.addLibrarian=function(){$scope.librarians[$scope.librariansCount]=new Object({index:$scope.librariansCount}),$scope.librariansCount++},$scope.removeLibrarian=function(index){$scope.librarians.splice(index,1),$scope.librariansCount--},$scope.checkIfTakenUsername=function(field,index){var responsePromise=$http.get("/api/usernameTaken/"+field.$viewValue);responsePromise.success(function(data){if(data===!0)console.log("taken"),field.$setValidity("taken",!1);else{for(var flag=!1,i=0;i<$scope.librariansCount;i++)if(field.$viewValue===$scope.librarians[i].username&&i!==index){field.$setValidity("taken",!1),flag=!0,console.log("taken");break}flag===!1&&field.$setValidity("taken",!0)}})},$scope.checkIfTakenEmail=function(field,index){var responsePromise=$http.get("/api/emailTaken/"+field.$viewValue);responsePromise.success(function(data){if(data===!0)console.log("taken"),field.$setValidity("taken",!1);else{for(var flag=!1,i=0;i<$scope.librariansCount;i++)if(field.$viewValue===$scope.librarians[i].email&&i!==index){field.$setValidity("taken",!1),flag=!0,console.log("taken");break}flag===!1&&field.$setValidity("taken",!0)}})},$scope.fieldsMatch=function(field,confirmField){field.$viewValue!==confirmField.$viewValue?confirmField.$setValidity("notMatching",!1):confirmField.$setValidity("notMatching",!0)}}),app.controller("editLibraryAdminCtrl",function($scope,$location,Library,ajaxPost,LibraryResource,$routeParams){$scope.library=LibraryResource.get({id:$routeParams.id}),$scope.updateLibrary=function(library){Library.updateLibrary(library).then(function(){$location.path("/admin/libraries")})}}),app.controller("LibraryDeleteCtrl",function($scope,$routeParams,$http,$location,notifier){$http.get("/api/library/delete/"+$routeParams.id).success(function(){notifier.success("The library has been successfully deleted.")}),$location.path("/admin/libraries")}),app.controller("LibraryInfoCtrl",function($scope,LibraryResource,LibBooksResource,$routeParams){$scope.libraryInfo=LibraryResource.get({id:$routeParams.id});var libBookArr=LibBooksResource.get({id:$routeParams.id});$scope.libBookInfo=libBookArr}),app.controller("LibraryListCtrl",function($scope,LibraryResourceSortable,$routeParams,$http){$scope.page=1,$scope.perPage=10,$scope.field="_id",$scope.order="asc",$scope.range=function(n){return new Array(n)},$scope.pages=function(){$http.get("/api/library/count").success(function(data){$scope.librariesCount=parseInt(data),$scope.pagesCount=Math.ceil($scope.librariesCount/$scope.perPage)})},$scope.libraries=LibraryResourceSortable.query({field:$scope.field,order:$scope.order,page:$scope.page,perPage:$scope.perPage}),$scope.setPage=function(page,event){$scope.page=page,angular.element(".pagination li").removeClass("active"),angular.element("#"+event.target.id).parent().addClass("active")},$scope.setPerPage=function(perPage){$scope.perPage=perPage},$scope.sort=function(event){$scope.field=event.target.id,$scope.order=$scope.order="asc"===$scope.order?"desc":"asc"},$scope.reloadLibraries=function(){$scope.libraries=LibraryResourceSortable.query({field:$scope.field,order:$scope.order,page:$scope.page,perPage:$scope.perPage})}}),app.controller("addUserAdminCtrl",function($scope,$location,$routeParams,$http,User,ajaxPost,notifier){$http({method:"get",url:"/api/roles"}).success(function(data){$scope.roles=data}).error(function(err){console.log(err)}),$http({method:"get",url:"/api/libraries"}).success(function(data){$scope.libraries=data}).error(function(err){console.log(err)}),$http({method:"get",url:"/api/countries"}).success(function(data){$scope.countries=data}).error(function(err){console.log(err)}),$scope.upload=!1,$scope.newLibrary=!1,$scope.addNewLibrary=function(){$scope.library=new Object({librarians:[$scope.user._id]}),$scope.newLibrary=!0},$scope.removeNewLibrary=function(){$scope.library=void 0,$scope.newLibrary=!1},$scope.addUserAsAdmin=function(user){$scope.newLibrary===!0?User.addAsAdmin(user,$scope.library,!0).then(function(){$location.path("/admin/users")},function(reason){notifier.error(reason)}):user.ownLibraryID?User.addAsAdmin(user,user.ownLibraryID,!1).then(function(){$location.path("/admin/users")},function(reason){notifier.error(reason)}):User.addAsAdmin(user).then(function(){$location.path("/admin/users")},function(reason){notifier.error(reason)})},$scope.setFileEventListener=function(element,field){"avatar"===field?($scope.uploadedAvatar=element.files[0],$scope.uploadedAvatar&&$scope.$apply(function(){$scope.uploadAvatarButtonState=!0})):"certificate"===field&&($scope.uploadedCertificate=element.files[0],$scope.uploadedCertificate&&$scope.$apply(function(){$scope.uploadCertificateButtonState=!0}))},$scope.uploadFile=function(field){if("avatar"===field){if(!$scope.uploadedAvatar)return;ajaxPost.uploadFileInit($scope.uploadedAvatar).then(function(result){200===result.status&&($scope.user.avatar=result.data,$scope.avatarUploadSuccessful=!0,$scope.avatarUploadError=!1,$scope.avatarTypeError=!1)},function(error){"Invalid mime type"===error.data?$scope.avatarTypeError=!0:$scope.avatarUploadError=!0,$scope.avatarError=error.data})}else{if(!$scope.uploadedCertificate)return;ajaxPost.uploadFileInit($scope.uploadedCertificate).then(function(result){200===result.status&&($scope.library.certificate=result.data,$scope.certificateUploadSuccessful=!0,$scope.certificateUploadError=!1,$scope.certificateTypeError=!1)},function(error){"Invalid mime type"===error.data?$scope.certificateTypeError=!0:$scope.certificateUploadError=!0,$scope.certificateError=error.data})}},$scope.checkIfTaken=function(field){var responsePromise=$http.get("/api/"+field.$name+"Taken/"+field.$viewValue);responsePromise.success(function(data){data===!0?field.$setValidity("taken",!1):field.$setValidity("taken",!0)})},$scope.fieldsMatch=function(field,confirmField){field.$viewValue!==confirmField.$viewValue?confirmField.$setValidity("notMatching",!1):confirmField.$setValidity("notMatching",!0)},$scope.selectLibrary=function(){}}),app.controller("editProfileAdminCtrl",function($scope,$location,$routeParams,$http,User,ajaxPost,UserResource,notifier){$scope.user=UserResource.get({id:$routeParams.id},function(){$scope.emailConfirm=$scope.user.email}),$scope.updateAsAdmin=function(user){-1!==user.roles.indexOf("librarian")||-1!==user.roles.indexOf("libraryOwner")?$scope.newLibrary===!0?User.updateAsAdmin(user,$scope.library,!0).then(function(){$location.path("/admin/users")}):user.hasOwnProperty("ownLibraryID")&&""!==user.hasOwnProperty?User.updateAsAdmin(user,user.ownLibraryID,!1).then(function(){$location.path("/admin/users")}):User.updateAsAdmin(user).then(function(){$location.path("/admin/users")}):(user.ownLibraryID="",User.updateAsAdmin(user).then(function(){$location.path("/admin/users"),notifier.success("User "+user.username+" updated!")},function(reason){notifier.error(reason)}))},$http({method:"get",url:"/api/roles"}).success(function(data){$scope.roles=data}).error(function(err){console.log(err)}),$http({method:"get",url:"/api/libraries"}).success(function(data){$scope.libraries=data,$scope.libraryObject=$scope.user.ownLibraryID}).error(function(err){console.log(err)}),$http({method:"get",url:"/api/countries"}).success(function(data){$scope.countries=data}).error(function(err){console.log(err)}),$scope.newLibrary=!1,$scope.selectLibrary=function(){$scope.user.ownLibraryID=$scope.libraryObject},$scope.addNewLibrary=function(){$scope.library=new Object({librarians:[$scope.user._id]}),$scope.newLibrary=!0},$scope.removeNewLibrary=function(){$scope.library=void 0,$scope.newLibrary=!1},$scope.upload=!1,$scope.setFileEventListener=function(element,field){"avatar"===field?($scope.uploadedAvatar=element.files[0],$scope.uploadedAvatar&&$scope.$apply(function(){$scope.uploadAvatarButtonState=!0})):"certificate"===field&&($scope.uploadedCertificate=element.files[0],$scope.uploadedCertificate&&$scope.$apply(function(){$scope.uploadCertificateButtonState=!0}))},$scope.uploadFile=function(field){if("avatar"===field){if(!$scope.uploadedAvatar)return;ajaxPost.uploadFileInit($scope.uploadedAvatar).then(function(result){200===result.status&&($scope.user.avatar=result.data,$scope.avatarUploadSuccessful=!0,$scope.avatarUploadError=!1,$scope.avatarTypeError=!1)},function(error){console.log(error),"Invalid mime type"===error.data?$scope.avatarTypeError=!0:$scope.avatarUploadError=!0,$scope.avatarError=error.data})}else{if(!$scope.uploadedCertificate)return;ajaxPost.uploadFileInit($scope.uploadedCertificate).then(function(result){200===result.status&&($scope.library.certificate=result.data,$scope.certificateUploadSuccessful=!0,$scope.certificateUploadError=!1,$scope.certificateTypeError=!1)},function(error){"Invalid mime type"===error.data?$scope.certificateTypeError=!0:$scope.certificateUploadError=!0,$scope.certificateError=error.data})}},$scope.checkIfTaken=function(field){var responsePromise=$http.get("/api/"+field.$name+"Taken/"+field.$viewValue);responsePromise.success(function(data){data===!0?field.$setValidity("taken",!1):field.$setValidity("taken",!0)})},$scope.fieldsMatch=function(field,confirmField){field.$viewValue!==confirmField.$viewValue?confirmField.$setValidity("notMatching",!1):confirmField.$setValidity("notMatching",!0)}}),app.controller("UserDeleteCtrl",function($scope,$routeParams,$http,$location,notifier){$http.get("/api/user/delete/"+$routeParams.id).success(function(){notifier.success("The user has been successfully deleted.")}),$location.path("/admin/users")}),app.controller("UserInfoCtrl",function($scope,UserResource,$routeParams){$scope.userInfo=UserResource.get({id:$routeParams.id},function(data){void 0===data.dateOfBirth&&(data.dateOfBirth="N/A"),void 0===data.facebookUrl&&(data.facebookUrl="N/A"),void 0===data.twitterUrl&&(data.twitterUrl="N/A"),void 0===data.googlePlusUrl&&(data.googlePlusUrl="N/A"),void 0===data.aboutMe&&(data.aboutMe="N/A")}),console.log($scope.userInfo)}),app.controller("UserListCtrl",function($scope,UsersResourceSortable,$routeParams,$http){$scope.page=1,$scope.perPage=10,$scope.field="_id",$scope.order="asc",$scope.range=function(n){return new Array(n)},$scope.pages=function(){$http.get("/api/users/count").success(function(data){$scope.usersCount=parseInt(data),$scope.pagesCount=Math.ceil($scope.usersCount/$scope.perPage)})},$scope.users=UsersResourceSortable.query({field:$scope.field,order:$scope.order,page:$scope.page,perPage:$scope.perPage}),$scope.setPage=function(page,event){$scope.page=page,console.log(page),angular.element(".pagination li").removeClass("active"),angular.element("#"+event.target.id).parent().addClass("active")},$scope.setPerPage=function(perPage){$scope.perPage=perPage},$scope.sort=function(event){$scope.field=event.target.id,$scope.order=$scope.order="asc"===$scope.order?"desc":"asc"},$scope.reloadUsers=function(){$scope.users=UsersResourceSortable.query({field:$scope.field,order:$scope.order,page:$scope.page,perPage:$scope.perPage})}}),app.controller("BookDetailsCtrl",function($scope,$routeParams,identity,$http,LibraryUsersInteractions,notifier,$location,BookResource,LibraryReadingResource,LibBookResource,$window,LibraryResource){$scope.bookInfo=BookResource.get({id:$routeParams.id}),void 0!=$routeParams.libraryID?($scope.libraryID=$routeParams.libraryID,$scope.readers=LibraryReadingResource.get({libraryID:$scope.libraryID}),$scope.quantity=LibBookResource.get({libraryID:$scope.libraryID,bookID:$routeParams.id}),$scope.library=LibraryResource.get({id:$scope.libraryID}),$scope.bookable=!1,$http.get("/api/library/booking/"+$scope.libraryID+"/"+$routeParams.id).success(function(data){if($scope.booked=parseInt(data),void 0===identity.currentUser)$scope.isMember=!1,$scope.isLoggedIn=!1;else{var responsePromise=$http.get("/api/library/member/"+$scope.libraryID+"/"+identity.currentUser._id);responsePromise.success(function(data){$scope.isMember=data===!0?!0:!1,$scope.bookable=$scope.quantity.available-$scope.booked>0&&identity.isAuthenticated()&&1==$scope.isMember?!0:!1}),$scope.isLoggedIn=!0}}),console.log($scope.quantity)):$scope.libraryID=-1,$scope.addBooking=function(){var booking=new Object({}),checkDay=new Date((new Date).getTime()+864e5),workingDays=$scope.library.workdays,workingHoursStr=$scope.library.workhours;
console.log($scope.library);var bookDate,workingHours=new Array;workingHoursStr.forEach(function(element,index){if(null!==element){var currentDay=new Array,currentSplit=element.split("-"),openingSplit=currentSplit[0],closingSplit=currentSplit[1];openingSplit=openingSplit.split(":"),openingSplit=openingSplit[0],closingSplit=closingSplit.split(":"),closingSplit=closingSplit[0],currentDay.push(openingSplit),currentDay.push(closingSplit),workingHours[index]=currentDay}});for(var todayWeekDay=checkDay.getDay(),initialDay=checkDay.getDay(),add=0;1!=workingDays[todayWeekDay]&&(todayWeekDay++,todayWeekDay!=initialDay);)7==todayWeekDay&&(todayWeekDay=0,add=!0);var workingHoursIndex=todayWeekDay,newBookingDate=new Date;newBookingDate=new Date(1==add?checkDay.getTime()+864e5*(Math.abs(7-initialDay)+(Math.abs(0-todayWeekDay)+1)):checkDay.getTime()+864e5*(Math.abs(todayWeekDay-initialDay)+add)),console.log(workingHours),console.log(workingHoursIndex+"!"),newBookingDate.setHours(workingHours[workingHoursIndex][1]),newBookingDate.setMinutes(0),newBookingDate.setSeconds(0),bookDate=newBookingDate,booking.userID=identity.currentUser._id,booking.libraryID=$scope.libraryID,booking.bookID=$routeParams.id,booking.bookDate=bookDate,LibraryUsersInteractions.addBooking(booking).then(function(){notifier.success("Booking added successfully!"),$window.location.href="/libraries"})}}),app.controller("LibrariesListCtrl",function($scope,cachedLibraries){$scope.libraries=cachedLibraries.query()}),app.controller("LibraryDetailsPageCtrl",function($scope,$routeParams,$route,cachedLibraries,LibBooksResource,UserReadingResource,identity,$http,LibraryUsers,notifier){if($scope.library=cachedLibraries.query().$promise.then(function(collection){collection.forEach(function(library){library._id===$routeParams.id&&($scope.library=library)})}),$scope.books=LibBooksResource.query({id:$routeParams.id}),void 0===identity.currentUser)$scope.isMember=!1,$scope.isLoggedIn=!1;else{var responsePromise=$http.get("/api/library/member/"+$routeParams.id+"/"+identity.currentUser._id);responsePromise.success(function(data){$scope.isMember=data===!0?!0:!1}),console.log($scope.isMember),$scope.isLoggedIn=!0}$scope.readings=void 0===identity.currentUser?[]:UserReadingResource.query({userID:identity.currentUser._id,libraryID:$routeParams.id}),$scope.subscribeForLibrary=function(){identity.currentUser.given=0,identity.currentUser.toReturn=0,identity.currentUser.userID=identity.currentUser._id,LibraryUsers.addUserToLibrary(identity.currentUser,$routeParams.id).then(function(){notifier.success("You've subscribed successfully!"),$route.reload()},function(reason){notifier.error(reason)})},$scope.unsubscribeForLibrary=function(){var responsePromise=$http.get("/api/library/delete-user/"+identity.currentUser._id+"/"+$routeParams.id);responsePromise.success(function(){notifier.success("You've unsubscribed successfully!"),$route.reload()}).error(function(reason){notifier.error(reason)})}}),app.controller("LibraryAddBookCtrl",function($scope,$location,$http,Book,notifier,identity){$scope.user=identity.currentUser,$scope.libraryID=identity.currentUser.ownLibraryID,$http({method:"get",url:"/api/genres"}).success(function(data){console.log(data),$scope.genres=data}).error(function(err){console.log(err)}),$scope.addBook=function(book){Book.add(book,identity.currentUser.ownLibraryID).then(function(){notifier.success("Book added successfully!"),$location.path("/libraryPanel/books-library")},function(reason){notifier.error(reason)})}}),app.controller("BookInfoCtrl",function($scope,BookResource,$routeParams){$scope.bookInfo=BookResource.get({id:$routeParams.id})}),app.controller("EditBookLibraryCtrl",function($scope,$location,Library,LibBookResource2,$routeParams){$scope.book=LibBookResource2.get({id:$routeParams.id}),console.log($scope.book),$scope.updateLibBookAsLibrarian=function(book){Library.updateLibBookAsLibrarian(book).then(function(){$location.path("/libraryPanel/books-library")})}}),app.controller("LibraryBookDeleteCtrl",function($scope,$routeParams,$http,$location,notifier){$http.get("/api/book/delete2/"+$routeParams.id).success(function(){notifier.success("The book has been successfully deleted.")}),$location.path("/libraryPanel/books-library")}),app.controller("LibraryBooksListCtrl",function($scope,LibBooksResource,$routeParams,$http,identity){$scope.user=identity.currentUser,$scope.books=LibBooksResource.query({id:$scope.user.ownLibraryID}),console.log($scope.books)}),app.controller("LibraryPanelCtrl",function($scope,identity,$location){$scope.identity=identity,$scope.path=$location.path(),$scope.menu=[{name:"library",links:{Details:"/libraryPanel/library-details"}},{name:"books",links:{add:"/libraryPanel/books/add",browse:"/libraryPanel/books-library",search:"/libraryPanel/books/search-library"}},{name:"users",links:{add:"/libraryPanel/users/add",browse:"/libraryPanel/users",search:"/libraryPanel/users/search","book requests":"/libraryPanel/users/book-requests","user interaction":"/libraryPanel/users/user-interaction"}}],$scope.getCurrentMenuItem=function(path){for(var i=0;i<$scope.menu.length;i++)for(var key in $scope.menu[i].links)if($scope.menu[i].links[key]===path)return $scope.menu[i].name;return""},$scope.currentMenuItem=$scope.getCurrentMenuItem($scope.path)}),app.controller("LibraryDetailsCtrl",function($scope,LibraryResource,$routeParams,$http,identity,Library,$location){$scope.user=identity.currentUser,$scope.library=LibraryResource.get({id:$scope.user.ownLibraryID},function(library){void 0==library.workHoursOpeningHour&&(library.workHoursOpeningHour=new Array(7)),void 0==library.workHoursClosingHour&&(library.workHoursClosingHour=new Array(7)),void 0==library.workHoursOpeningMinutes&&(library.workHoursOpeningMinutes=new Array(7)),void 0==library.workHoursClosingMinutes&&(library.workHoursClosingMinutes=new Array(7));for(var openingTime,closingTime,times,i=0;7>i;i++)1==library.workdays[i]&&void 0!=library.workdays[i]?(times=library.workhours[i].split("-"),openingTime=times[0],closingTime=times[1],openingTime=openingTime.split(":"),closingTime=closingTime.split(":"),library.workHoursOpeningHour[i]=openingTime[0],library.workHoursOpeningMinutes[i]=openingTime[1],library.workHoursClosingHour[i]=closingTime[0],library.workHoursClosingMinutes[i]=closingTime[1]):library.workdays[i]=!1}),$scope.updateLibrary=function(library){for(var workdays=new Array,workhours=new Array,workhoursString="",i=0;7>i;i++)1==library.workdays[i]&&(workdays[i]=!0,workhoursString=library.workHoursOpeningHour[i]+":"+library.workHoursOpeningMinutes[i]+"-"+library.workHoursClosingHour[i]+":"+library.workHoursClosingMinutes[i],workhours[i]=workhoursString);delete library.workdays,delete library.workhours,library.workdays=workdays,library.workhours=workhours,console.log(library),Library.updateLibrary(library).then(function(){$location.path("/libraryPanel")})},$scope.get24hours=function(){var a=new Array(24);return console.log(a),a}}),app.controller("AddUserToLibraryCtrl",function($scope,$location,Library,notifier,identity){$scope.libraryID=identity.currentUser.ownLibraryID,console.log("blah"),$scope.addUserToLibrary=function(user){user.given=0,user.toReturn=0,Library.addUserToLibrary(user,identity.currentUser.ownLibraryID).then(function(){notifier.success("User added successfully!"),$location.path("/libraryPanel/users")},function(reason){notifier.error(reason)})}}),app.controller("BookingRequestsCtrl",function($scope,BookingResourceSortable,$routeParams,$http,identity){$scope.page=1,$scope.perPage=10,$scope.field="_id",$scope.order="asc",$scope.user=identity.currentUser,$scope.range=function(n){return new Array(n)},$scope.pages=function(){$http.get("/api/library/booking-count/"+$scope.user.ownLibraryID).success(function(data){console.log(data),$scope.usersCount=parseInt(data),$scope.pagesCount=Math.ceil($scope.usersCount/$scope.perPage)})},$scope.bookings=BookingResourceSortable.query({libraryID:$scope.user.ownLibraryID,field:$scope.field,order:$scope.order,page:$scope.page,perPage:$scope.perPage}),$scope.setPage=function(page,event){$scope.page=page,angular.element(".pagination li").removeClass("active"),angular.element("#"+event.target.id).parent().addClass("active")},$scope.setPerPage=function(perPage){$scope.perPage=perPage},$scope.sort=function(event){$scope.field=event.target.id,$scope.order=$scope.order="asc"===$scope.order?"desc":"asc"},$scope.reloadBookings=function(){$scope.bookings=BookingResourceSortable.query({libraryID:$scope.user.ownLibraryID,field:$scope.field,order:$scope.order,page:$scope.page,perPage:$scope.perPage})}}),app.controller("LibraryUsers2Ctrl",function($scope,LibraryUsersResourceSortable,$routeParams,$http,identity){$scope.page=1,$scope.perPage=10,$scope.field="_id",$scope.order="asc",$scope.user=identity.currentUser,$scope.range=function(n){return new Array(n)},$scope.pages=function(){$http.get("/api/library/user-count").success(function(data){$scope.usersCount=parseInt(data),$scope.pagesCount=Math.ceil($scope.usersCount/$scope.perPage)})},$scope.users=LibraryUsersResourceSortable.query({id:$scope.user.ownLibraryID,field:$scope.field,order:$scope.order,page:$scope.page,perPage:$scope.perPage}),console.log($scope.users),$scope.setPage=function(page,event){$scope.page=page,angular.element(".pagination li").removeClass("active"),angular.element("#"+event.target.id).parent().addClass("active")},$scope.setPerPage=function(perPage){$scope.perPage=perPage},$scope.sort=function(event){$scope.field=event.target.id,$scope.order=$scope.order="asc"===$scope.order?"desc":"asc"},$scope.reloadUsers=function(){$scope.users=LibraryUsersResourceSortable.query({id:$scope.user.ownLibraryID,field:$scope.field,order:$scope.order,page:$scope.page,perPage:$scope.perPage})}}),app.controller("LibraryUsersCtrl",function($scope,LibraryUsersResourceSortable,$routeParams,$http,identity){$scope.page=1,$scope.perPage=10,$scope.field="_id",$scope.order="asc",$scope.user=identity.currentUser,$scope.range=function(n){return new Array(n)},$scope.pages=function(){$http.get("/api/library/user-count").success(function(data){$scope.usersCount=parseInt(data),$scope.pagesCount=Math.ceil($scope.usersCount/$scope.perPage)})},$scope.users=LibraryUsersResourceSortable.query({id:$scope.user.ownLibraryID,field:$scope.field,order:$scope.order,page:$scope.page,perPage:$scope.perPage}),console.log($scope.users),$scope.setPage=function(page,event){$scope.page=page,angular.element(".pagination li").removeClass("active"),angular.element("#"+event.target.id).parent().addClass("active")},$scope.setPerPage=function(perPage){$scope.perPage=perPage},$scope.sort=function(event){$scope.field=event.target.id,$scope.order=$scope.order="asc"===$scope.order?"desc":"asc"},$scope.reloadUsers=function(){$scope.users=LibraryUsersResourceSortable.query({id:$scope.user.ownLibraryID,field:$scope.field,order:$scope.order,page:$scope.page,perPage:$scope.perPage})}}),app.controller("UserDeleteFromLibraryCtrl",function($scope,$routeParams,$http,$location,notifier,identity){$http.get("/api/library/delete-user/"+$routeParams.id+"/"+identity.currentUser.ownLibraryID).success(function(){notifier.success("The user has been successfully unsubscribed from the library.")}),$location.path("/libraryPanel/users")}),app.controller("UserInfoLibraryCtrl",function($scope,UserResource,$routeParams){$scope.userInfo=UserResource.get({id:$routeParams.id},function(data){void 0===data.dateOfBirth&&(data.dateOfBirth="N/A"),void 0===data.facebookUrl&&(data.facebookUrl="N/A"),void 0===data.twitterUrl&&(data.twitterUrl="N/A"),void 0===data.googlePlusUrl&&(data.googlePlusUrl="N/A"),void 0===data.aboutMe&&(data.aboutMe="N/A")})}),app.controller("UserInteractLibraryCtrl",function($scope,UserResource,$routeParams,identity,LibraryUsersInteractions,notifier,$http,$location,LibBooksResource,UserNotReturnedResource){$scope.booksToReturn=UserNotReturnedResource.query({userID:$routeParams.id,libraryID:identity.currentUser.ownLibraryID}),$scope.books=LibBooksResource.query({id:identity.currentUser.ownLibraryID}),$scope.Date=new Date,$scope.Date30Days=new Date((new Date).getTime()+2592e6),$scope.userInfo=UserResource.get({id:$routeParams.id},function(data){void 0===data.dateOfBirth&&(data.dateOfBirth="N/A"),void 0===data.facebookUrl&&(data.facebookUrl="N/A"),void 0===data.twitterUrl&&(data.twitterUrl="N/A"),void 0===data.googlePlusUrl&&(data.googlePlusUrl="N/A"),void 0===data.aboutMe&&(data.aboutMe="N/A")}),console.log($scope.books),console.log($scope.booksToReturn),$scope.bookOption=function(bookName,bookISBN){return bookName+" ("+bookISBN+")"},$scope.giveBook=function(give){give.userID=$routeParams.id,give.libraryID=identity.currentUser.ownLibraryID,give.librarian1ID=identity.currentUser._id,give.bookID=give.bookInfo.bookID,give.bookISBN=give.bookInfo.bookISBN,give.bookName=give.bookInfo.bookName,delete give.bookInfo,LibraryUsersInteractions.giveBook(give).then(function(){notifier.success("Book given successfully!"),$location.path("/libraryPanel/users")},function(reason){notifier.error(reason)})},$scope.returnBook=function(interact){interact.userID=$routeParams.id,interact.libraryID=identity.currentUser.ownLibraryID,interact.librarian2ID=identity.currentUser._id,interact.returnDate=new Date,LibraryUsersInteractions.returnBook(interact).then(function(){notifier.success("Book returned successfully!"),$location.path("/libraryPanel/users")},function(reason){notifier.error(reason)})}}),app.controller("MainCtrl",function($scope,cachedLibraries){$scope.libraries=cachedLibraries.query()}),app.directive("csvImport",function(){return{restrict:"A",transclude:!0,replace:!0,scope:{content:"=",separator:"=",result:"="},template:'<h3 class="text-center">Import from CSV<div class="text-center col-xs-12"><input type="file" class="btn btn-info custom-file-input"></input></div></h3>',link:function(scope,element){element.on("keyup",function(){if(null!==scope.content){var content={csv:scope.content};scope.result=csvToArray(content),scope.$apply()}}),element.on("change",function(onChangeEvent){var reader=new FileReader;if(reader.onload=function(onLoadEvent){scope.$apply(function(){var content={csv:onLoadEvent.target.result};scope.content=content.csv,scope.result=csvToArray(content)})},"file"!==onChangeEvent.target.type||null===onChangeEvent.target.files&&null===onChangeEvent.srcElement.files){if(null!==scope.content){var content={csv:scope.content};scope.result=csvToArray(content)}}else reader.readAsText((onChangeEvent.srcElement||onChangeEvent.target).files[0])});var csvToArray=function(content){for(var lines=content.csv.split("\n"),result=[],start=0,columnCount=lines[0].split(",").length,i=start;i<lines.length;i++){var arr=[],currentline=lines[i].split(",");if(currentline.length===columnCount){for(var k=0;k<currentline.length;k++)arr.push(currentline[k]);result.push(arr)}}return result}}}}),app.directive("datepicker",function(){return{restrict:"A",link:function($scope,$elem){$elem.datepicker({startView:2,autoclose:!0,startDate:"01/01/1900",endDate:"today",language:"en"})}}}),app.directive("loadingButton",function(){return{restrict:"A",link:function($scope,$elem){$elem.click(function(){$elem.button("loading")}),$scope.$watch("user.avatar",function(){$elem.button("reset")}),$scope.$watch("searchState",function(){$elem.button("reset")}),$scope.$watch("library.certificate",function(){$elem.button("reset")}),$scope.$watch("book.cover",function(){$elem.button("reset")}),$scope.$watch("avatarError",function(){$elem.button("reset"),$scope.avatarError=""}),$scope.$watch("certificateError",function(){$elem.button("reset"),$scope.certificateError=""}),$scope.$watch("coverError",function(){$elem.button("reset"),$scope.coverError=""})}}}),app.directive("resize",function($window){return function(scope){var w=angular.element($window);scope.getWindowDimensions=function(){return{h:w.height(),w:w.width()}},scope.$watch(scope.getWindowDimensions,function(newValue){scope.windowHeight=newValue.h,scope.windowWidth=newValue.w},!0),w.bind("resize",function(){scope.$apply()})}}),app.directive("tooltip",function(){return{restrict:"A",link:function($scope,$elem){$elem.tooltip()}}}),app.filter("startFrom",function(){return function(input,start){return start=+start,input.slice(start)}}),app.filter("titleCase",function(){return function(input){return input.charAt(0).toUpperCase()+input.substr(1).replace(/[A-Z]/g," $&")}}),app.factory("ajaxPost",["$http",function(_http){return{uploadFileInit:function(uploadedFile){var fd=new FormData;fd.append("uploadedFile",uploadedFile);var uploadPromise=_http.post("/api/images",fd,{headers:{"Content-Type":void 0},transformRequest:angular.identity}).success(function(){});return uploadPromise}}}]),app.factory("Book",function($q,$http,BookResource){return{add:function(book,libraryID){var deferred=$q.defer();console.log(book),"undefined"!=typeof libraryID&&(book.libraryID=libraryID);var newBook=new BookResource(book);return newBook.$save().then(function(){deferred.resolve()},function(response){deferred.reject(response)}),deferred.promise},updateAsAdmin:function(book){var deferred=$q.defer(),updatedBook=new BookResource(book);return updatedBook._id=book._id,updatedBook.$update().then(function(){deferred.resolve()},function(response){deferred.reject(response)}),deferred.promise}}}),app.factory("bookSearch",function($q,$http){return{search:function(isbn){var deferred=$q.defer(),promisesArray=[],isbnJustNumber=isbn.replace(/-/gi,""),countryCode="";if(countryCode=13===isbnJustNumber.length?isbnJustNumber.substring(0,6):"978"+isbnJustNumber.substring(0,3),"978619"===countryCode||"978954"===countryCode){var scrapBgBooksInPrintPromise=$http.get("/api/book/booksinprint/"+isbn,{timeout:deferred.promise});promisesArray.push(scrapBgBooksInPrintPromise),scrapBgBooksInPrintPromise.success(function(data){"false"!==data&&data!==!1&&deferred.resolve(data)})}var findInDatabasePromise=$http.get("/api/book/findByISBN/"+isbn,{timeout:deferred.promise});promisesArray.push(findInDatabasePromise),findInDatabasePromise.success(function(data){"false"!==data&&data!==!1&&deferred.resolve(data)});var findInAmazonPromise=$http.get("/api/book/amazonSearch/"+isbn,{timeout:deferred.promise});promisesArray.push(findInAmazonPromise),findInAmazonPromise.success(function(data){"false"!==data&&data!==!1&&(console.log(data),deferred.resolve(data))});var findInGoogleBooksPromise=$http.get("/api/book/googleBooksSearch/"+isbn,{timeout:deferred.promise});return promisesArray.push(findInGoogleBooksPromise),findInGoogleBooksPromise.success(function(data){"false"!==data&&data!==!1&&deferred.resolve(data)}),$q.all(promisesArray).then(function(){deferred.reject("Not found")}),deferred.promise}}}),app.factory("BookResource",function($resource){var BookResource=$resource("/api/books/:id",{id:"@id"},{update:{method:"PUT",isArray:!1}});return BookResource}),app.factory("LibBookResource2",function($resource){var LibBookResource2=$resource("/api/library/book/:id",{id:"@id"},{update:{method:"PUT",isArray:!1},get:{method:"GET",isArray:!1}});return LibBookResource2}),app.factory("cachedBooks",function(BookResource){var cachedBooks;return{query:function(){return cachedBooks||(cachedBooks=BookResource.query()),cachedBooks}}}),app.factory("cachedLibraries",function(LibraryResource){var cachedLibraries;return{query:function(){return cachedLibraries||(cachedLibraries=LibraryResource.query()),cachedLibraries}}}),app.factory("Library",function($http,$q,UsersResource,UserResource,LibraryResource,LibrarianResource){return{addLibrary:function(library,librarians){var libraryID,deferred=$q.defer(),newLibrary=new LibraryResource(library);return newLibrary.$save(function(data){libraryID=data._id,librarians.forEach(function(element){element.ownLibraryID=libraryID;var newUser=new LibrarianResource(element);newUser.$save().then(function(data){$http({method:"get",url:"/api/library/addLibrarian/"+libraryID+"/"+data._id})})});for(var userID in library.librarians){var user=UserResource.get({id:library.librarians[userID]});user.ownLibraryID=libraryID;var updatedUser=new UsersResource(user);updatedUser._id=library.librarians[userID],updatedUser.$update()}library._id=libraryID}).then(function(){deferred.resolve()},function(response){deferred.reject(response)}),deferred.promise},updateLibrary:function(library){var deferred=$q.defer(),updatedLibrary=new LibraryResource(library);return delete updatedLibrary.$resolved,delete updatedLibrary.$promise,console.log(updatedLibrary),updatedLibrary.$update().then(function(){deferred.resolve()},function(response){deferred.reject(response)}),deferred.promise}}}),app.factory("LibraryBooks",function($q,LibBookResource2){return{updateLibBookAsLibrarian:function(book){var deferred=$q.defer(),updatedBook=new LibBookResource2(book);return updatedBook._id=book._id,updatedBook.$update().then(function(){deferred.resolve()},function(response){deferred.reject(response)}),deferred.promise}}}),app.factory("LibraryUsers",function($q,LibUserResource){return{addUserToLibrary:function(user,libraryID){var deferred=$q.defer();"undefined"!=typeof libraryID&&(user.libraryID=libraryID);var newUser=new LibUserResource(user);return newUser.$save().then(function(){deferred.resolve()},function(response){deferred.reject(response)}),deferred.promise}}}),app.factory("LibraryUsersInteractions",function($q,BookGiveResource,BookReturnResource,BookingResource){return{giveBook:function(interaction){var deferred=$q.defer(),newReading=new BookGiveResource(interaction);return newReading.$save().then(function(){deferred.resolve()},function(response){deferred.reject(response)}),deferred.promise},returnBook:function(interaction){var deferred=$q.defer(),newReading=new BookReturnResource(interaction);return newReading.$save().then(function(){deferred.resolve()},function(response){deferred.reject(response)}),deferred.promise},addBooking:function(booking){var deferred=$q.defer(),newBooking=new BookingResource(booking);return newBooking.$save().then(function(){deferred.resolve()},function(response){deferred.reject(response)}),deferred.promise}}}),app.factory("BookGiveResource",function($resource){var BookGiveResource=$resource("/api/library/add-reading/:id",{id:"@id"},{update:{method:"PUT",isArray:!1}});return BookGiveResource}),app.factory("BookReturnResource",function($resource){var BookReturnResource=$resource("/api/library/remove-reading/:id",{id:"@id"},{update:{method:"PUT",isArray:!1}});return BookReturnResource}),app.factory("BookingResource",function($resource){var BookingResource=$resource("/api/library/addbooking",{id:"@id"},{update:{method:"PUT",isArray:!1}});return BookingResource}),app.factory("LibBookResource",function($resource){var LibBookResource=$resource("/api/library/book2/:bookID/:libraryID",{id:"@id"},{update:{method:"PUT",isArray:!1},get:{method:"GET",isArray:!1}});return LibBookResource}),app.factory("LibBookResource2",function($resource){var LibBookResource2=$resource("/api/library/book/:id",{id:"@id"},{update:{method:"PUT",isArray:!1},get:{method:"GET",isArray:!1}});return LibBookResource2}),app.factory("LibBooksResource",function($resource){var LibBooksResource=$resource("/api/library/books/:id",{id:"@id"},{update:{method:"PUT",isArray:!1},get:{method:"GET",isArray:!0}});return LibBooksResource}),app.factory("LibUserResource",function($resource){var LibUserResource=$resource("/api/library/add-user",{id:"@id"},{update:{method:"PUT",isArray:!1},get:{method:"GET",isArray:!0}});return LibUserResource}),app.factory("LibrarianResource",function($resource){var LibrarianResource=$resource("/api/librarianCreate/:id",{_id:"@id"},{update:{method:"PUT",isArray:!1}});return LibrarianResource}),app.factory("LibraryReadingResource",function($resource){var LibraryReadingResource=$resource("/api/all-readings-library/:libraryID",{id:"@id"},{update:{method:"PUT",isArray:!1},get:{method:"GET",isArray:!0}});return LibraryReadingResource}),app.factory("LibraryResource",function($resource){var LibraryResource=$resource("/api/libraries/:id",{id:"@id"},{update:{method:"PUT",isArray:!1}});return LibraryResource}),app.factory("notifier",function(toastr){return{success:function(msg){toastr.success(msg)},error:function(msg){toastr.error(msg)}}}),app.factory("BookResourceSortable",function($resource){var BookResourceSortable=$resource("/api/book/sort/:field/:order/:page/:perPage",{_id:"@id"},{update:{method:"PUT",isArray:!1}});return BookResourceSortable.prototype.isAdmin=function(){return this.roles&&this.roles.indexOf("admin")>-1},BookResourceSortable}),app.factory("BookingResourceSortable",function($resource){var BookingResourceSortable=$resource("/api/library/booking-sort/:libraryID/:field/:order/:page/:perPage",{_id:"@id"},{update:{method:"PUT",isArray:!1}});return BookingResourceSortable.prototype.isAdmin=function(){return this.roles&&this.roles.indexOf("admin")>-1},BookingResourceSortable}),app.factory("LibraryResourceSortable",function($resource){var LibraryResourceSortable=$resource("/api/library/sort/:field/:order/:page/:perPage",{_id:"@id"},{update:{method:"PUT",isArray:!1}});return LibraryResourceSortable.prototype.isAdmin=function(){return this.roles&&this.roles.indexOf("admin")>-1},LibraryResourceSortable}),app.factory("LibraryUsersResourceSortable",function($resource){var LibraryUsersResourceSortable=$resource("/api/library/users/:id/:field/:order/:page/:perPage",{_id:"@id"},{update:{method:"PUT",isArray:!1}});return LibraryUsersResourceSortable}),app.factory("UsersResourceSortable",function($resource){var UsersResourceSortable=$resource("/api/users/sort/:field/:order/:page/:perPage",{_id:"@id"},{update:{method:"PUT",isArray:!1}});return UsersResourceSortable.prototype.isAdmin=function(){return this.roles&&this.roles.indexOf("admin")>-1},UsersResourceSortable}),app.factory("User",function($http,$q,identity,UsersResource,UserResource,LibraryResource){return{signup:function(user){var deferred=$q.defer(),newUser=new UsersResource(user);return newUser.$save().then(function(){identity.currentUser=newUser,deferred.resolve()},function(response){deferred.reject(response)}),deferred.promise},login:function(user){var deferred=$q.defer();return $http.post("/login",user).success(function(response){if(response.success){var user=new UsersResource;angular.extend(user,response.user),identity.currentUser=user,deferred.resolve(!0)}else deferred.resolve(!1)}),deferred.promise},logout:function(){var deferred=$q.defer();return $http.post("/logout").success(function(){identity.currentUser=void 0,deferred.resolve()}),deferred.promise},update:function(user){var deferred=$q.defer(),updatedUser=new UsersResource(user);return updatedUser._id=identity.currentUser._id,updatedUser.$update().then(function(){updatedUser.hasOwnProperty("roles")||(updatedUser.roles=identity.currentUser.roles),identity.currentUser=updatedUser,deferred.resolve()},function(response){deferred.reject(response.data.reason)}),deferred.promise},addAsAdmin:function(user,library,newLibrary){var deferred=$q.defer(),newUser=new UsersResource(user);if(newUser._id=user._id,void 0!==library){if(newLibrary===!0){var newLibraryResource=new LibraryResource(library);return newLibraryResource.$save(function(data){newUser.ownLibraryID=data._id,newUser.$save(function(userData){library.librarians=userData._id;var updatedLibrary=new LibraryResource(library);updatedLibrary._id=userData.ownLibraryID,updatedLibrary.$update().then(function(){deferred.resolve()},function(response){deferred.reject(response.data.reason)})},function(response){deferred.reject(response.data.reason)})},function(response){deferred.reject(response.data.reason)}),deferred.promise}return newUser.$save(function(data){library.librarians.push(data._id);var updatedLibrary=new LibraryResource(library);updatedLibrary.$update(function(data){newUser.ownLibraryID=data._id,newUser.$update().then(function(){deferred.resolve()},function(response){deferred.reject(response.data.reason)})},function(response){deferred.reject(response.data.reason)})},function(response){deferred.reject(response.data.reason)}),deferred.promise}return newUser.$save().then(function(){deferred.resolve()},function(response){deferred.reject(response.data.reason)}),deferred.promise},updateAsAdmin:function(user,library,newLibrary){var deferred=$q.defer();if(identity.currentUser.hasOwnProperty("roles")&&identity.currentUser.roles.indexOf("admin")>-1){var updatedUser=new UsersResource(user);if(updatedUser._id=user._id,void 0!==library){if(newLibrary===!0){var newLibraryResource=new LibraryResource(library);return newLibraryResource.$save(function(data){updatedUser.ownLibraryID=data._id,updatedUser.$update().then(function(){deferred.resolve()},function(response){deferred.reject(response.data.reason)})}),deferred.promise}void 0!==library.librarians&&-1===library.librarians.indexOf(user._id)&&library.librarians.push(user._id);var updatedLibrary=new LibraryResource(library);return updatedLibrary._id=library._id,updatedLibrary.$update(function(data){updatedUser.ownLibraryID=data._id,updatedUser.$update().then(function(){deferred.resolve()},function(response){deferred.reject(response.data.reason)})}),deferred.promise}return updatedUser.$update().then(function(){deferred.resolve()},function(response){deferred.reject(response.data.reason)}),deferred.promise}deferred.reject("You are not authorized for this action!")},isAuthenticated:function(){return identity.isAuthenticated()?!0:$q.reject("not authorized")},isAuthorizedForRole:function(role){return identity.isAuthorizedForRole(role)?!0:$q.reject("not authorized")}}}),app.factory("identity",function($window,UsersResource){var user;return $window.bootstrappedUserObject&&(user=new UsersResource,angular.extend(user,$window.bootstrappedUserObject)),{currentUser:user,isAuthenticated:function(){return!!this.currentUser},isAuthorizedForRole:function(userRole){if(!this.currentUser)return!1;switch(userRole){case"admin":return this.currentUser.roles.indexOf("admin")>-1?!0:!1;case"moderator":return this.currentUser.roles.indexOf("admin")>-1||this.currentUser.roles.indexOf("moderator")>-1?!0:!1;case"libraryOwner":return this.currentUser.roles.indexOf("admin")>-1||this.currentUser.roles.indexOf("libraryOwner")>-1?!0:!1;case"librarian":return this.currentUser.roles.indexOf("admin")>-1||this.currentUser.roles.indexOf("libraryOwner")>-1||this.currentUser.roles.indexOf("librarian")>-1?!0:!1;case"standart":return!0;default:return!1}}}}),app.factory("UserNotReturnedResource",function($resource){var UserNotReturnedResource=$resource("/api/library/not-returned/:libraryID/:userID",{id:"@id"},{get:{method:"GET",isArray:!0},update:{method:"PUT",isArray:!0}});return UserNotReturnedResource}),app.factory("UserReadingResource",function($resource){var UserReadingResource=$resource("/api/all-readings/:libraryID/:userID",{id:"@id"},{update:{method:"PUT",isArray:!1}});return UserReadingResource}),app.factory("UserResource",function($resource){var UserResource=$resource("/api/userInfo/:id",{_id:"@id"},{update:{method:"PUT",isArray:!1}});return UserResource.prototype.isAdmin=function(){return this.roles&&this.roles.indexOf("admin")>-1},UserResource}),app.factory("UsersResource",function($resource){var UsersResource=$resource("/api/users/:id",{_id:"@id"},{update:{method:"PUT",isArray:!1}});return UsersResource.prototype.isAdmin=function(){return this.roles&&this.roles.indexOf("admin")>-1},UsersResource.prototype.isLibrarian=function(){return this.roles&&this.roles.indexOf("librarian")>-1},UsersResource.prototype.isLibraryOwner=function(){return this.roles&&this.roles.indexOf("libraryOwner")>-1},UsersResource.prototype.isAdminOrLibrarian=function(){return this.roles&&this.roles.indexOf("admin")>-1?!0:this.roles&&this.roles.indexOf("librarian")>-1?!0:this.roles&&this.roles.indexOf("libraryOwner")>-1?!0:!1},UsersResource.prototype.hasLibraryPanel=function(){return this.roles&&this.roles.indexOf("librarian")>-1?!0:this.roles&&this.roles.indexOf("libraryOwner")>-1?!0:!1},UsersResource});
