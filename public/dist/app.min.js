"use strict";var app=angular.module("app",["ngResource","ngRoute","reCAPTCHA","nya.bootstrap.select"]).value("toastr",toastr);app.run(function($rootScope,$location){$rootScope.$on("$routeChangeError",function(ev,current,previous,rejection){"not authorized"===rejection&&$location.path("/404")})}),app.config(function($locationProvider,reCAPTCHAProvider){$locationProvider.html5Mode(!0),reCAPTCHAProvider.setPublicKey("6Lcy4csSAAAAAFdcvcxawMgzlJCabD0G5bk5lp2U"),reCAPTCHAProvider.setOptions({theme:"clean"})}),app.config(function($routeProvider){var routeUserChecks={adminRole:{authenticate:function(auth){return auth.isAuthorizedForRole("admin")}},librarianRole:{authenticate:function(auth){return auth.isAuthorizedForRole("librarian")}},libraryOwnerRole:{authenticate:function(auth){return auth.isAuthorizedForRole("libraryOwner")}},authenticated:{authenticate:function(auth){return auth.isAuthenticated()}}};$routeProvider.when("/admin",{templateUrl:"/partials/admin-panel/settings",controller:"AdminPanelCtrl",resolve:routeUserChecks.adminRole}).when("/admin/users",{templateUrl:"/partials/admin-panel/users/users-list",controller:"UserListCtrl",resolve:routeUserChecks.adminRole}).when("/admin/user/:id",{templateUrl:"/partials/admin-panel/users/users-info",controller:"UserInfoCtrl",resolve:routeUserChecks.adminRole}).when("/admin/user/edit/:id",{templateUrl:"/partials/admin-panel/users/user-edit",controller:"editProfileAdminCtrl",resolve:routeUserChecks.adminRole}).when("/admin/user/delete/:id",{templateUrl:"/partials/admin-panel/users/user-delete",controller:"UserDeleteCtrl",resolve:routeUserChecks.adminRole}).when("/admin/libraries",{templateUrl:"/partials/admin-panel/libraries/libraries-list",controller:"LibraryListCtrl",resolve:routeUserChecks.adminRole}).when("/admin/libraries/add",{templateUrl:"/partials/admin-panel/libraries/library-add",controller:"AddLibraryCtrl",resolve:routeUserChecks.adminRole}).when("/admin/libraries/add/librarians",{templateUrl:"/partials/admin-panel/libraries/library-add-librarians",controller:"AddLibraryCtrl",resolve:routeUserChecks.adminRole}).when("/admin/libraries/users/:id",{templateUrl:"/partials/admin-panel/libraries/library-users",controller:"LibraryUsersCtrl",resolve:routeUserChecks.adminRole}).when("/admin/library/:id",{templateUrl:"/partials/admin-panel/libraries/libraries-info",controller:"LibraryInfoCtrl",resolve:routeUserChecks.adminRole}).when("/librarian/library/:id",{templateUrl:"/partials/admin-panel/libraries/libraries-info",controller:"LibraryInfoCtrl",resolve:routeUserChecks.adminRole}).when("/admin/library/edit/:id",{templateUrl:"/partials/admin-panel/libraries/library-edit",controller:"editLibraryAdminCtrl",resolve:routeUserChecks.adminRole}).when("/admin/library/delete/:id",{templateUrl:"/partials/admin-panel/libraries/library-delete",controller:"LibraryDeleteCtrl",resolve:routeUserChecks.adminRole}).when("/admin/books",{templateUrl:"/partials/admin-panel/books/books-list",controller:"BookListCtrl",resolve:routeUserChecks.adminRole}).when("/admin/book/:id",{templateUrl:"/partials/admin-panel/books/books-info",controller:"BookInfoCtrl",resolve:routeUserChecks.adminRole}).when("/admin/books/add",{templateUrl:"/partials/admin-panel/books/book-add",controller:"AddBookCtrl",resolve:routeUserChecks.adminRole}).when("/admin/book/edit/:id",{templateUrl:"/partials/admin-panel/books/book-edit",controller:"editBookAdminCtrl",resolve:routeUserChecks.adminRole}).when("/admin/book/delete/:id",{templateUrl:"/partials/admin-panel/books/book-delete",controller:"BookDeleteCtrl",resolve:routeUserChecks.adminRole})}),app.config(function($routeProvider){$routeProvider.when("/",{templateUrl:"/partials/main/home",controller:"MainCtrl"}).when("/libraries",{templateUrl:"/partials/libraries/libraries-list",controller:"LibrariesListCtrl"}).when("/libraries/:id",{templateUrl:"/partials/libraries/library-details",controller:"LibraryDetailsPageCtrl"}).when("/book/:id",{templateUrl:"/partials/books/book-details",controller:"BookDetailsCtrl"}).when("/book/:id/:libraryID",{templateUrl:"/partials/books/book-details",controller:"BookDetailsCtrl"}).when("/404",{templateUrl:"/partials/account/log-in"}).otherwise({redirectTo:"/404"})}),app.config(function($routeProvider){var routeUserChecks={adminRole:{authenticate:function(auth){return auth.isAuthorizedForRole("admin")}},librarianRole:{authenticate:function(auth){return auth.isAuthorizedForRole("librarian")}},libraryOwnerRole:{authenticate:function(auth){return auth.isAuthorizedForRole("libraryOwner")}},authenticated:{authenticate:function(auth){return auth.isAuthenticated()}}};$routeProvider.when("/libraryPanel",{templateUrl:"/partials/library-panel/panel",controller:"LibraryPanelCtrl",resolve:routeUserChecks.librarianRole}).when("/libraryPanel/library-details",{templateUrl:"/partials/library-panel/settings/library-details",controller:"LibraryDetailsCtrl",resolve:routeUserChecks.librarianRole}).when("/libraryPanel/books/add",{templateUrl:"/partials/library-panel/books/book-add",controller:"LibraryAddBookCtrl",resolve:routeUserChecks.librarianRole}).when("/libraryPanel/bookInfo/:id",{templateUrl:"/partials/library-panel/books/books-info",controller:"BookInfoCtrl",resolve:routeUserChecks.librarianRole}).when("/libraryPanel/books-library",{templateUrl:"/partials/library-panel/books/books-list",controller:"LibraryBooksListCtrl",resolve:routeUserChecks.librarianRole}).when("/libraryPanel/books/search",{templateUrl:"/partials/library-panel/books/books-search",controller:"LibraryBooksSearchCtrl",resolve:routeUserChecks.librarianRole}).when("/libraryPanel/book/edit/:id",{templateUrl:"/partials/library-panel/books/book-edit",controller:"EditBookLibraryCtrl",resolve:routeUserChecks.librarianRole}).when("/libraryPanel/book/delete/:id",{templateUrl:"/partials/library-panel/books/book-delete",controller:"LibraryBookDeleteCtrl",resolve:routeUserChecks.librarianRole}).when("/libraryPanel/users",{templateUrl:"/partials/library-panel/users/users-list",controller:"LibraryUsersCtrl",resolve:routeUserChecks.librarianRole}).when("/libraryPanel/users/add",{templateUrl:"/partials/library-panel/users/user-add",controller:"AddUserToLibraryCtrl",resolve:routeUserChecks.librarianRole}).when("/libraryPanel/userInfo/:id",{templateUrl:"/partials/library-panel/users/user-info",controller:"UserInfoLibraryCtrl",resolve:routeUserChecks.librarianRole}).when("/libraryPanel/user/interact/:id",{templateUrl:"/partials/library-panel/users/user-interact",controller:"UserInteractLibraryCtrl",resolve:routeUserChecks.librarianRole}).when("/libraryPanel/user/delete/:id",{templateUrl:"/partials/library-panel/users/user-delete",controller:"UserDeleteFromLibraryCtrl",resolve:routeUserChecks.librarianRole})}),app.config(function($routeProvider){var routeUserChecks={adminRole:{authenticate:function(auth){return auth.isAuthorizedForRole("admin")}},librarianRole:{authenticate:function(auth){return auth.isAuthorizedForRole("librarian")}},libraryOwnerRole:{authenticate:function(auth){return auth.isAuthorizedForRole("libraryOwner")}},authenticated:{authenticate:function(auth){return auth.isAuthenticated()}}};$routeProvider.when("/signup",{templateUrl:"/partials/account/sign-up",controller:"SignUpCtrl"}).when("/login",{templateUrl:"/partials/account/log-in",controller:"LogInCtrl"}).when("/profile",{templateUrl:"/partials/account/profile",controller:"ProfileCtrl",resolve:routeUserChecks.authenticated}).when("/profile/edit",{templateUrl:"/partials/account/edit-profile",controller:"EditProfileCtrl",resolve:routeUserChecks.authenticated})}),app.controller("EditProfileCtrl",function($scope,$location,auth,identity,ajaxPost,$window,$http){$scope.user={username:identity.currentUser.username,firstName:identity.currentUser.firstName,lastName:identity.currentUser.lastName,email:identity.currentUser.email,avatar:identity.currentUser.avatar,gender:identity.currentUser.gender,dateOfBirth:identity.currentUser.dateOfBirth,facebookUrl:identity.currentUser.facebookUrl,twitterUrl:identity.currentUser.twitterUrl,googlePlusUrl:identity.currentUser.googlePlusUrl,aboutMe:identity.currentUser.aboutMe},$scope.upload=!1,$scope.emailConfirm=$scope.user.email,console.log("lqlq"),$scope.update=function(user){console.log("the ctrl"),auth.update(user).then(function(){$scope.user=user,$location="/profile"})},$scope.getMonth=function(user){console.log("test"),auth.getMonth(user)},$scope.setFileEventListener=function(element){$scope.uploadedFile=element.files[0],$scope.uploadedFile&&$scope.$apply(function(){$scope.uploadButtonState=!0})},$scope.uploadFile=function(){$scope.uploadedFile&&ajaxPost.uploadFileInit($scope.uploadedFile).then(function(result){200===result.status&&($scope.user.avatar=result.data,$scope.avatarUploadSuccessful=!0,$scope.avatarUploadError=!1,$scope.avatarTypeError=!1)},function(error){"Invalid mime type"===error.data?$scope.avatarTypeError=!0:$scope.avatarUploadError=!0,$scope.avatarError=error.data})},$scope.checkIfTaken=function(field){var responsePromise=$http.get("/api/"+field.$name+"Taken/"+field.$viewValue);responsePromise.success(function(data){"true"===data?field.$setValidity("taken",!1):field.$setValidity("taken",!0)})},$scope.fieldsMatch=function(field,confirmField){field.$viewValue!==confirmField.$viewValue?confirmField.$setValidity("notMatching",!1):confirmField.$setValidity("notMatching",!0)}}),app.controller("LogInCtrl",function($scope,$location,notifier,identity,auth,$window){$scope.identity=identity,$scope.login=function(user){auth.login(user).then(function(success){success?(notifier.success("Successful login!"),$location.path("/")):(notifier.error("Username/Password combination is not valid or the RECAPTCHA Challenge is not complete!"),$window.Recaptcha.reload())})},$scope.logout=function(){auth.logout().then(function(){notifier.success("Successful logout!"),$scope.user&&($scope.user.username="",$scope.user.password=""),$location.path("/")})}}),app.controller("ProfileCtrl",function($scope,identity){$scope.user=identity.currentUser}),app.controller("SignUpCtrl",function($scope,$location,auth,notifier,$http,$window){$scope.signup=function(user){auth.signup(user).then(function(){notifier.success("Registration successful!"),$location.path("/")},function(reason){notifier.error(reason),$window.Recaptcha.reload()})},$scope.checkIfTaken=function(field){var responsePromise=$http.get("../api/"+field.$name+"Taken/"+field.$viewValue);responsePromise.success(function(data){"true"===data?field.$setValidity("taken",!1):field.$setValidity("taken",!0)})},$scope.passwordMatch=function(password,confirmPassword){password.$viewValue!==confirmPassword.$viewValue?confirmPassword.$setValidity("notMatching",!1):confirmPassword.$setValidity("notMatching",!0)}}),app.controller("AdminPanelCtrl",function($scope,$location,identity){$scope.identity=identity,$scope.path=$location.path(),$scope.menu=[{name:"libraries",links:{add:"/admin/libraries/add",browse:"/admin/libraries",search:"/admin/libraries/search"}},{name:"books",links:{add:"/admin/books/add",browse:"/admin/books",search:"/admin/books/search-library"}},{name:"users",links:{add:"/admin/users/add",browse:"/admin/users",search:"/admin/users/search"}}],$scope.getCurrentMenuItem=function(path){for(var i=0;i<$scope.menu.length;i++)for(var key in $scope.menu[i].links)if($scope.menu[i].links[key]===path)return $scope.menu[i].name;return""},$scope.currentMenuItem=$scope.getCurrentMenuItem($scope.path)}),app.controller("AddBookCtrl",function($scope,$window,$http,auth,notifier){$http({method:"get",url:"/api/genres"}).success(function(data){$scope.genres=data}).error(function(err){console.log(err)}),$scope.addBook=function(book){auth.addBook(book).then(function(){$window.location.href="/admin/books",notifier.success("Book added successfully!")},function(reason){notifier.error(reason)})}}),app.controller("BookDeleteCtrl",function($scope,$routeParams,$http,$location,notifier){$http.get("/api/book/delete/"+$routeParams.id).success(function(){notifier.success("The book has been successfully deleted.")}),$location.path("/admin/books")}),app.controller("BookInfoCtrl",function($scope,BookResource,$routeParams){$scope.bookInfo=BookResource.get({id:$routeParams.id})}),app.controller("BookListCtrl",function($scope,BookResourceSortable,$routeParams,$http){$scope.page=1,$scope.perPage=10,$scope.field="_id",$scope.order="asc",$scope.range=function(n){return new Array(n)},$scope.pages=function(){$http.get("/api/book/count").success(function(data){$scope.booksCount=parseInt(data),$scope.pagesCount=Math.ceil($scope.booksCount/$scope.perPage)})},$scope.books=BookResourceSortable.query({field:$scope.field,order:$scope.order,page:$scope.page,perPage:$scope.perPage}),$scope.setPage=function(page,event){$scope.page=page,angular.element(".pagination li").removeClass("active"),angular.element("#"+event.target.id).parent().addClass("active")},$scope.setPerPage=function(perPage){$scope.perPage=perPage},$scope.sort=function(event){$scope.field=event.target.id,$scope.order=$scope.order="asc"===$scope.order?"desc":"asc"},$scope.reloadBooks=function(){$scope.books=BookResourceSortable.query({field:$scope.field,order:$scope.order,page:$scope.page,perPage:$scope.perPage})}}),app.controller("BooksListCtrl",function($scope,cachedBooks){$scope.books=cachedBooks.query()}),app.controller("editBookAdminCtrl",function($scope,$location,$http,auth,ajaxPost,BookResource,$routeParams){$scope.book=BookResource.get({id:$routeParams.id}),$http({method:"get",url:"/api/genres"}).success(function(data){$scope.genres=data}).error(function(err){console.log(err)}),$scope.updateBookAsAdmin=function(book){auth.updateBookAsAdmin(book).then(function(){$location.path("/admin/books")})}}),app.controller("AddLibraryCtrl",function($scope,$http,$window,auth,notifier,UserResource,ajaxPost){$scope.addLibrary=function(library,librarians){auth.addLibrary(library,librarians).finally(function(){notifier.success("Library added successfully!")})},$http({method:"get",url:"/api/countries"}).success(function(data){$scope.countries=data}).error(function(err){console.log(err)}),$http({method:"get",url:"/api/users"}).success(function(data){$scope.users=new Array;var b=0;for(var user in data)""!==data[user].ownLibraryID&&data[user].ownLibraryID||($scope.users[b]=data[user],b++)}).error(function(err){console.log(err)}),$scope.setFileEventListener=function(element){$scope.uploadedFile=element.files[0],$scope.uploadedFile&&$scope.$apply(function(){$scope.uploadButtonState=!0})},$scope.uploadFile=function(){$scope.uploadedFile&&ajaxPost.uploadFileInit($scope.uploadedFile).then(function(result){200===result.status&&($scope.library.certificate=result.data,$scope.certificateUploadSuccessful=!0,$scope.certificateUploadError=!1,$scope.certificateTypeError=!1)},function(error){"Invalid mime type"===error.data?$scope.certificateTypeError=!0:$scope.certificateUploadError=!0,$scope.certificateError=error.data})},$scope.librariansCount=0,$scope.librarians=new Array;for(var i=0;i<$scope.librariansCount;i++)$scope.librarians[i]=new Object({index:i});$scope.addLibrarian=function(){$scope.librarians[$scope.librariansCount]=new Object({index:$scope.librariansCount}),$scope.librariansCount++},$scope.removeLibrarian=function(index){$scope.librarians.splice(index,1),$scope.librariansCount--},$scope.checkIfTakenUsername=function(field,index){var responsePromise=$http.get("/api/usernameTaken/"+field.$viewValue);responsePromise.success(function(data){if("true"===data)console.log("taken"),field.$setValidity("taken",!1);else{for(var flag=!1,i=0;i<$scope.librariansCount;i++)if(field.$viewValue===$scope.librarians[i].username&&i!==index){field.$setValidity("taken",!1),flag=!0,console.log("taken");break}flag===!1&&field.$setValidity("taken",!0)}})},$scope.checkIfTakenEmail=function(field,index){var responsePromise=$http.get("/api/emailTaken/"+field.$viewValue);responsePromise.success(function(data){if("true"===data)console.log("taken"),field.$setValidity("taken",!1);else{for(var flag=!1,i=0;i<$scope.librariansCount;i++)if(field.$viewValue===$scope.librarians[i].email&&i!==index){field.$setValidity("taken",!1),flag=!0,console.log("taken");break}flag===!1&&field.$setValidity("taken",!0)}})},$scope.fieldsMatch=function(field,confirmField){field.$viewValue!==confirmField.$viewValue?confirmField.$setValidity("notMatching",!1):confirmField.$setValidity("notMatching",!0)}}),app.controller("editLibraryAdminCtrl",function($scope,$location,auth,ajaxPost,LibraryResource,$routeParams){$scope.library=LibraryResource.get({id:$routeParams.id}),$scope.updateLibraryAsAdmin=function(library){auth.updateLibraryAsAdmin(library).then(function(){$location.path("/admin/libraries")})}}),app.controller("LibraryDeleteCtrl",function($scope,$routeParams,$http,$location,notifier){$http.get("/api/library/delete/"+$routeParams.id).success(function(){notifier.success("The library has been successfully deleted.")}),$location.path("/admin/libraries")}),app.controller("LibraryInfoCtrl",function($scope,LibraryResource,LibBookResource,$routeParams){$scope.libraryInfo=LibraryResource.get({id:$routeParams.id});var libBookArr=LibBookResource.get({id:$routeParams.id});$scope.libBookInfo=libBookArr}),app.controller("LibraryListCtrl",function($scope,LibraryResourceSortable,$routeParams,$http){$scope.page=1,$scope.perPage=10,$scope.field="_id",$scope.order="asc",$scope.range=function(n){return new Array(n)},$scope.pages=function(){$http.get("/api/library/count").success(function(data){$scope.librariesCount=parseInt(data),$scope.pagesCount=Math.ceil($scope.librariesCount/$scope.perPage)})},$scope.libraries=LibraryResourceSortable.query({field:$scope.field,order:$scope.order,page:$scope.page,perPage:$scope.perPage}),$scope.setPage=function(page,event){$scope.page=page,angular.element(".pagination li").removeClass("active"),angular.element("#"+event.target.id).parent().addClass("active")},$scope.setPerPage=function(perPage){$scope.perPage=perPage},$scope.sort=function(event){$scope.field=event.target.id,$scope.order=$scope.order="asc"===$scope.order?"desc":"asc"},$scope.reloadLibraries=function(){$scope.libraries=LibraryResourceSortable.query({field:$scope.field,order:$scope.order,page:$scope.page,perPage:$scope.perPage})}}),app.controller("editProfileAdminCtrl",function($scope,$location,$routeParams,$window,$http,auth,ajaxPost,UserResource){$scope.user=UserResource.get({id:$routeParams.id},function(){$scope.emailConfirm=$scope.user.email}),console.log($scope.user.ownLibraryID),$http({method:"get",url:"/api/roles"}).success(function(data){$scope.roles=data}).error(function(err){console.log(err)}),$http({method:"get",url:"/api/libraries"}).success(function(data){$scope.libraries=data,$scope.libraryObject=$scope.user.ownLibraryID}).error(function(err){console.log(err)}),$scope.upload=!1,$scope.updateAsAdmin=function(user){auth.updateAsAdmin(user).then(function(){$window.location.href("/admin/users")})},$scope.setFileEventListener=function(element){$scope.uploadedFile=element.files[0],$scope.uploadedFile&&$scope.$apply(function(){$scope.uploadButtonState=!0})},$scope.uploadFile=function(){$scope.uploadedFile&&ajaxPost.uploadFileInit($scope.uploadedFile).then(function(result){200===result.status&&($scope.user.avatar=result.data,$scope.avatarUploadSuccessful=!0,$scope.avatarUploadError=!1,$scope.avatarTypeError=!1)},function(error){"Invalid mime type"===error.data?$scope.avatarTypeError=!0:$scope.avatarUploadError=!0,$scope.avatarError=error.data})},$scope.checkIfTaken=function(field){var responsePromise=$http.get("/api/"+field.$name+"Taken/"+field.$viewValue);responsePromise.success(function(data){"true"===data?field.$setValidity("taken",!1):field.$setValidity("taken",!0)})},$scope.fieldsMatch=function(field,confirmField){field.$viewValue!==confirmField.$viewValue?confirmField.$setValidity("notMatching",!1):confirmField.$setValidity("notMatching",!0)},$scope.selectLibrary=function(){console.log($scope.libraryObject),$scope.user.ownLibraryID=$scope.libraryObject}}),app.controller("UserDeleteCtrl",function($scope,$routeParams,$http,$location,notifier){$http.get("/api/user/delete/"+$routeParams.id).success(function(){notifier.success("The user has been successfully deleted.")}),$location.path("/admin/users")}),app.controller("UserInfoCtrl",function($scope,UserResource,$routeParams){$scope.userInfo=UserResource.get({id:$routeParams.id},function(data){void 0===data.dateOfBirth&&(data.dateOfBirth="N/A"),void 0===data.facebookUrl&&(data.facebookUrl="N/A"),void 0===data.twitterUrl&&(data.twitterUrl="N/A"),void 0===data.googlePlusUrl&&(data.googlePlusUrl="N/A"),void 0===data.aboutMe&&(data.aboutMe="N/A")}),console.log($scope.userInfo)}),app.controller("UserListCtrl",function($scope,UsersResourceSortable,$routeParams,$http){$scope.page=1,$scope.perPage=10,$scope.field="_id",$scope.order="asc",$scope.range=function(n){return new Array(n)},$scope.pages=function(){$http.get("/api/users/count").success(function(data){$scope.usersCount=parseInt(data),$scope.pagesCount=Math.ceil($scope.usersCount/$scope.perPage)})},$scope.users=UsersResourceSortable.query({field:$scope.field,order:$scope.order,page:$scope.page,perPage:$scope.perPage}),$scope.setPage=function(page,event){$scope.page=page,console.log(page),angular.element(".pagination li").removeClass("active"),angular.element("#"+event.target.id).parent().addClass("active")},$scope.setPerPage=function(perPage){$scope.perPage=perPage},$scope.sort=function(event){$scope.field=event.target.id,$scope.order=$scope.order="asc"===$scope.order?"desc":"asc"},$scope.reloadUsers=function(){$scope.users=UsersResourceSortable.query({field:$scope.field,order:$scope.order,page:$scope.page,perPage:$scope.perPage})}}),app.controller("BookDetailsCtrl",function($scope,$routeParams,identity,$http,auth,notifier,$location,BookResource,LibraryReadingResource){$scope.bookInfo=BookResource.get({id:$routeParams.id}),void 0!=$routeParams.libraryID?($scope.libraryID=$routeParams.libraryID,$scope.readers=LibraryReadingResource.get({libraryID:$scope.libraryID}),console.log($scope.readers)):$scope.libraryID=-1,console.log($scope.libraryID)}),app.controller("LibrariesListCtrl",function($scope,cachedLibraries){$scope.libraries=cachedLibraries.query()}),app.controller("LibraryDetailsPageCtrl",function($scope,$routeParams,$route,cachedLibraries,LibBookResource,UserReadingResource,identity,$http,auth,notifier){if($scope.library=cachedLibraries.query().$promise.then(function(collection){collection.forEach(function(library){library._id===$routeParams.id&&($scope.library=library,console.log(library))})}),$scope.books=LibBookResource.query({id:$routeParams.id}),void 0===identity.currentUser)$scope.isMember=!1,$scope.isLoggedIn=!1;else{var responsePromise=$http.get("/api/library/member/"+$routeParams.id+"/"+identity.currentUser._id);responsePromise.success(function(data){$scope.isMember="true"===data?!0:!1}),$scope.isLoggedIn=!0}$scope.readings=void 0===identity.currentUser?[]:UserReadingResource.query({userID:identity.currentUser._id,libraryID:$routeParams.id}),$scope.subscribeForLibrary=function(){identity.currentUser.given=0,identity.currentUser.toReturn=0,identity.currentUser.userID=identity.currentUser._id,auth.addUserToLibrary(identity.currentUser,$routeParams.id).then(function(){notifier.success("You've subscribed successfully!"),$route.reload()},function(reason){notifier.error(reason)})},$scope.unsubscribeForLibrary=function(){var responsePromise=$http.get("/api/library/delete-user/"+identity.currentUser._id+"/"+$routeParams.id);responsePromise.success(function(){notifier.success("You've unsubscribed successfully!"),$route.reload()}).error(function(reason){notifier.error(reason)})}}),app.controller("LibraryAddBookCtrl",function($scope,$location,$http,auth,notifier,identity){$scope.user=identity.currentUser,$scope.libraryID=identity.currentUser.ownLibraryID,$http({method:"get",url:"/api/genres"}).success(function(data){console.log(data),$scope.genres=data}).error(function(err){console.log(err)}),$scope.addBook=function(book){auth.addBook(book,identity.currentUser.ownLibraryID).then(function(){notifier.success("Book added successfully!"),$location.path("/libraryPanel/books-library")},function(reason){notifier.error(reason)})}}),app.controller("BookInfoCtrl",function($scope,BookResource,$routeParams){$scope.bookInfo=BookResource.get({id:$routeParams.id})}),app.controller("EditBookLibraryCtrl",function($scope,$location,auth,LibBookResource2,$routeParams){$scope.book=LibBookResource2.get({id:$routeParams.id}),console.log($scope.book),$scope.updateLibBookAsLibrarian=function(book){auth.updateLibBookAsLibrarian(book).then(function(){$location.path("/libraryPanel/books-library")})}}),app.controller("LibraryBookDeleteCtrl",function($scope,$routeParams,$http,$location,notifier){$http.get("/api/book/delete2/"+$routeParams.id).success(function(){notifier.success("The book has been successfully deleted.")}),$location.path("/libraryPanel/books-library")}),app.controller("LibraryBooksListCtrl",function($scope,LibBookResource,$routeParams,$http,identity){$scope.user=identity.currentUser,$scope.books=LibBookResource.query({id:$scope.user.ownLibraryID}),console.log($scope.books)}),app.controller("LibraryPanelCtrl",function($scope,identity,$location){$scope.identity=identity,$scope.path=$location.path(),$scope.menu=[{name:"library",links:{Details:"/libraryPanel/library-details"}},{name:"books",links:{add:"/libraryPanel/books/add",browse:"/libraryPanel/books-library",search:"/libraryPanel/books/search-library"}},{name:"users",links:{add:"/libraryPanel/users/add",browse:"/libraryPanel/users",search:"/libraryPanel/users/search","book requests":"/libraryPanel/users/book-requests","user interaction":"/libraryPanel/users/user-interaction"}}],$scope.getCurrentMenuItem=function(path){for(var i=0;i<$scope.menu.length;i++)for(var key in $scope.menu[i].links)if($scope.menu[i].links[key]===path)return $scope.menu[i].name;return""},$scope.currentMenuItem=$scope.getCurrentMenuItem($scope.path)}),app.controller("LibraryDetailsCtrl",function($scope,LibraryResource,$routeParams,$http,identity,auth,$location){$scope.user=identity.currentUser,$scope.library=LibraryResource.get({id:$scope.user.ownLibraryID}),$scope.updateLibraryAsLibrarian=function(library){auth.updateLibraryAsLibrarian(library).then(function(){console.log(library),$location.path("/libraryPanel")})}}),app.controller("AddUserToLibraryCtrl",function($scope,$location,auth,notifier,identity){$scope.libraryID=identity.currentUser.ownLibraryID,console.log("blah"),$scope.addUserToLibrary=function(user){user.given=0,user.toReturn=0,auth.addUserToLibrary(user,identity.currentUser.ownLibraryID).then(function(){notifier.success("User added successfully!"),$location.path("/libraryPanel/users")},function(reason){notifier.error(reason)})}}),app.controller("LibraryUsers2Ctrl",function($scope,LibraryUsersResourceSortable,$routeParams,$http,identity){$scope.page=1,$scope.perPage=10,$scope.field="_id",$scope.order="asc",$scope.user=identity.currentUser,$scope.range=function(n){return new Array(n)},$scope.pages=function(){$http.get("/api/library/user-count").success(function(data){$scope.usersCount=parseInt(data),$scope.pagesCount=Math.ceil($scope.usersCount/$scope.perPage)})},$scope.users=LibraryUsersResourceSortable.query({id:$scope.user.ownLibraryID,field:$scope.field,order:$scope.order,page:$scope.page,perPage:$scope.perPage}),console.log($scope.users),$scope.setPage=function(page,event){$scope.page=page,angular.element(".pagination li").removeClass("active"),angular.element("#"+event.target.id).parent().addClass("active")},$scope.setPerPage=function(perPage){$scope.perPage=perPage},$scope.sort=function(event){$scope.field=event.target.id,$scope.order=$scope.order="asc"===$scope.order?"desc":"asc"},$scope.reloadUsers=function(){$scope.users=LibraryUsersResourceSortable.query({id:$scope.user.ownLibraryID,field:$scope.field,order:$scope.order,page:$scope.page,perPage:$scope.perPage})}}),app.controller("LibraryUsersCtrl",function($scope,LibraryUsersResourceSortable,$routeParams,$http,identity){$scope.page=1,$scope.perPage=10,$scope.field="_id",$scope.order="asc",$scope.user=identity.currentUser,$scope.range=function(n){return new Array(n)},$scope.pages=function(){$http.get("/api/library/user-count").success(function(data){$scope.usersCount=parseInt(data),$scope.pagesCount=Math.ceil($scope.usersCount/$scope.perPage)})},$scope.users=LibraryUsersResourceSortable.query({id:$scope.user.ownLibraryID,field:$scope.field,order:$scope.order,page:$scope.page,perPage:$scope.perPage}),console.log($scope.users),$scope.setPage=function(page,event){$scope.page=page,angular.element(".pagination li").removeClass("active"),angular.element("#"+event.target.id).parent().addClass("active")},$scope.setPerPage=function(perPage){$scope.perPage=perPage},$scope.sort=function(event){$scope.field=event.target.id,$scope.order=$scope.order="asc"===$scope.order?"desc":"asc"},$scope.reloadUsers=function(){$scope.users=LibraryUsersResourceSortable.query({id:$scope.user.ownLibraryID,field:$scope.field,order:$scope.order,page:$scope.page,perPage:$scope.perPage})}}),app.controller("UserDeleteFromLibraryCtrl",function($scope,$routeParams,$http,$location,notifier,identity){$http.get("/api/library/delete-user/"+$routeParams.id+"/"+identity.currentUser.ownLibraryID).success(function(){notifier.success("The user has been successfully unsubscribed from the library.")}),$location.path("/libraryPanel/users")}),app.controller("UserInfoLibraryCtrl",function($scope,UserResource,$routeParams){$scope.userInfo=UserResource.get({id:$routeParams.id},function(data){void 0===data.dateOfBirth&&(data.dateOfBirth="N/A"),void 0===data.facebookUrl&&(data.facebookUrl="N/A"),void 0===data.twitterUrl&&(data.twitterUrl="N/A"),void 0===data.googlePlusUrl&&(data.googlePlusUrl="N/A"),void 0===data.aboutMe&&(data.aboutMe="N/A")})}),app.controller("UserInteractLibraryCtrl",function($scope,UserResource,$routeParams,identity,auth,notifier,$http,$location){$scope.userInfo=UserResource.get({id:$routeParams.id},function(data){void 0===data.dateOfBirth&&(data.dateOfBirth="N/A"),void 0===data.facebookUrl&&(data.facebookUrl="N/A"),void 0===data.twitterUrl&&(data.twitterUrl="N/A"),void 0===data.googlePlusUrl&&(data.googlePlusUrl="N/A"),void 0===data.aboutMe&&(data.aboutMe="N/A")}),$http({method:"get",url:"/api/library/not-returned/"+identity.currentUser.ownLibraryID+"/"+$routeParams.id}).success(function(data){$scope.userInfo.books=data,console.log($scope.userInfo.books)}).error(function(err){console.log(err)}),$scope.giveBook=function(interact){interact.userID=$routeParams.id,interact.libraryID=identity.currentUser.ownLibraryID,interact.librarian1ID=identity.currentUser._id,auth.giveBook(interact).then(function(){notifier.success("Book given successfully!"),$location.path("/libraryPanel/users")},function(reason){notifier.error(reason)})},$scope.returnBook=function(interact){interact.userID=$routeParams.id,interact.libraryID=identity.currentUser.ownLibraryID,interact.librarian2ID=identity.currentUser._id,interact.returnDate=new Date,auth.returnBook(interact).then(function(){notifier.success("Book returned successfully!"),$location.path("/libraryPanel/users")},function(reason){notifier.error(reason)})}}),app.controller("MainCtrl",function($scope,cachedLibraries){$scope.libraries=cachedLibraries.query()}),app.directive("datepicker",function(){return{restrict:"A",link:function($scope,$elem){$elem.datepicker({startView:2,autoclose:!0,startDate:"01/01/1900",endDate:"today",language:"en"})}}}),app.directive("loadingButton",function(){return{restrict:"A",link:function($scope,$elem){$elem.click(function(){$elem.button("loading")}),$scope.$watch("user.avatar",function(){$elem.button("reset")}),$scope.$watch("avatarError",function(){$elem.button("reset"),$scope.avatarError=""})}}}),app.directive("resize",function($window){return function(scope){var w=angular.element($window);scope.getWindowDimensions=function(){return{h:w.height(),w:w.width()}
},scope.$watch(scope.getWindowDimensions,function(newValue){scope.windowHeight=newValue.h,scope.windowWidth=newValue.w,scope.windowWidth<768?(scope.dataToggle="collapse",scope.dataTarget=".navbar-inverse-collapse"):(scope.dataToggle="",scope.dataTarget="")},!0),w.bind("resize",function(){scope.$apply()})}}),app.directive("tooltip",function(){return{restrict:"A",link:function($scope,$elem){$elem.tooltip()}}}),app.filter("titleCase",function(){return function(input){return input.charAt(0).toUpperCase()+input.substr(1).replace(/[A-Z]/g," $&")}}),app.factory("ajaxPost",["$http",function(_http){return{uploadFileInit:function(uploadedFile){var fd=new FormData;fd.append("uploadedFile",uploadedFile);var uploadPromise=_http.post("/api/images",fd,{headers:{"Content-Type":void 0},transformRequest:angular.identity}).success(function(){});return uploadPromise}}}]),app.factory("auth",function($http,$q,identity,UsersResource,UserResource,LibraryResource,BookResource,LibBookResource2,LibUserResource,ReadingResource,ReadingResource2,LibrarianResource){return{signup:function(user){var deferred=$q.defer(),newUser=new UsersResource(user);return newUser.$save().then(function(){identity.currentUser=newUser,deferred.resolve()},function(response){deferred.reject(response.data.reason)}),deferred.promise},update:function(user){var deferred=$q.defer(),updatedUser=new UsersResource(user);return console.log(updatedUser),updatedUser._id=identity.currentUser._id,updatedUser.$update().then(function(){identity.currentUser=updatedUser,deferred.resolve()},function(response){deferred.reject(response)}),deferred.promise},updateAsAdmin:function(user){var deferred=$q.defer(),updatedUser=new UsersResource(user);return updatedUser._id=user._id,updatedUser.$update().then(function(){deferred.resolve()},function(response){deferred.reject(response)}),deferred.promise},addLibrary:function(library,librarians){var libraryID,deferred=$q.defer(),newLibrary=new LibraryResource(library);return newLibrary.$save(function(data){libraryID=data._id,librarians.forEach(function(element){element.ownLibraryID=libraryID;var newUser=new LibrarianResource(element);newUser.$save().then(function(data){$http({method:"get",url:"/api/library/addLibrarian/"+libraryID+"/"+data._id}).success(function(){}).error(function(){})})});for(var userID in library.librarians){var user=UserResource.get({id:library.librarians[userID]});user.ownLibraryID=libraryID;var updatedUser=new UsersResource(user);updatedUser._id=library.librarians[userID],updatedUser.$update()}library._id=libraryID}).then(function(){deferred.resolve()},function(response){deferred.reject(response.data.reason)}),deferred.promise},updateLibraryAsAdmin:function(library){var deferred=$q.defer(),updatedLibrary=new LibraryResource(library);return updatedLibrary._id=library._id,updatedLibrary.$update().then(function(){deferred.resolve()},function(response){deferred.reject(response)}),deferred.promise},updateLibraryAsLibrarian:function(library){var deferred=$q.defer(),updatedLibrary=new LibraryResource(library);return updatedLibrary._id=library._id,updatedLibrary.$update().then(function(){deferred.resolve()},function(response){deferred.reject(response)}),deferred.promise},updateBookAsAdmin:function(book){var deferred=$q.defer(),updatedBook=new BookResource(book);return updatedBook._id=book._id,updatedBook.$update().then(function(){deferred.resolve()},function(response){deferred.reject(response)}),deferred.promise},updateLibBookAsLibrarian:function(book){var deferred=$q.defer(),updatedBook=new LibBookResource2(book);return updatedBook._id=book._id,updatedBook.$update().then(function(){deferred.resolve()},function(response){deferred.reject(response)}),deferred.promise},addBook:function(book,libraryID){var deferred=$q.defer();void 0!==typeof libraryID&&(book.libraryID=libraryID);var newBook=new BookResource(book);return newBook.$save().then(function(){deferred.resolve()},function(response){deferred.reject(response.data.reason)}),deferred.promise},addUserToLibrary:function(user,libraryID){var deferred=$q.defer();void 0!==typeof libraryID&&(user.libraryID=libraryID),console.log(user);var newUser=new LibUserResource(user);return newUser.$save().then(function(){deferred.resolve()},function(response){deferred.reject(response.data.reason)}),deferred.promise},login:function(user){var deferred=$q.defer();return $http.post("/login",user).success(function(response){if(response.success){var user=new UsersResource;angular.extend(user,response.user),identity.currentUser=user,deferred.resolve(!0)}else deferred.resolve(!1)}),deferred.promise},logout:function(){var deferred=$q.defer();return $http.post("/logout").success(function(){identity.currentUser=void 0,deferred.resolve()}),deferred.promise},isAuthenticated:function(){return identity.isAuthenticated()?!0:$q.reject("not authorized")},isAuthorizedForRole:function(role){return identity.isAuthorizedForRole(role)?!0:$q.reject("not authorized")},giveBook:function(interact){var deferred=$q.defer(),newReading=new ReadingResource(interact);return newReading.$save().then(function(){deferred.resolve()},function(response){deferred.reject(response.data.reason)}),deferred.promise},returnBook:function(interact){var deferred=$q.defer(),newReading=new ReadingResource2(interact);return newReading.$save().then(function(){deferred.resolve()},function(response){deferred.reject(response.data.reason)}),deferred.promise}}}),app.factory("BookResource",function($resource){var BookResource=$resource("/api/books/:id",{id:"@id"},{update:{method:"PUT",isArray:!1}});return BookResource}),app.factory("BookResourceSortable",function($resource){var BookResourceSortable=$resource("/api/book/sort/:field/:order/:page/:perPage",{_id:"@id"},{update:{method:"PUT",isArray:!1}});return BookResourceSortable.prototype.isAdmin=function(){return this.roles&&this.roles.indexOf("admin")>-1},BookResourceSortable}),app.factory("cachedBooks",function(BookResource){var cachedBooks;return{query:function(){return cachedBooks||(cachedBooks=BookResource.query()),cachedBooks}}}),app.factory("cachedLibraries",function(LibraryResource){var cachedLibraries;return{query:function(){return cachedLibraries||(cachedLibraries=LibraryResource.query()),cachedLibraries}}}),app.factory("identity",function($window,UsersResource){var user;return $window.bootstrappedUserObject&&(user=new UsersResource,angular.extend(user,$window.bootstrappedUserObject)),{currentUser:user,isAuthenticated:function(){return!!this.currentUser},isAuthorizedForRole:function(role){return!!this.currentUser&&this.currentUser.roles.indexOf(role)>-1}}}),app.factory("LibBookResource",function($resource){var LibBookResource=$resource("/api/library/books/:id",{id:"@id"},{update:{method:"PUT",isArray:!1},get:{method:"GET",isArray:!0}});return LibBookResource}),app.factory("LibBookResource2",function($resource){var LibBookResource2=$resource("/api/library/book/:id",{id:"@id"},{update:{method:"PUT",isArray:!1},get:{method:"GET",isArray:!1}});return LibBookResource2}),app.factory("LibUserResource",function($resource){var LibUserResource=$resource("/api/library/add-user",{id:"@id"},{update:{method:"PUT",isArray:!1},get:{method:"GET",isArray:!0}});return LibUserResource}),app.factory("LibrarianResource",function($resource){var LibrarianResource=$resource("/api/librarianCreate/:id",{_id:"@id"},{update:{method:"PUT",isArray:!1}});return LibrarianResource}),app.factory("LibraryReadingResource",function($resource){var LibraryReadingResource=$resource("/api/all-readings-library/:libraryID",{id:"@id"},{update:{method:"PUT",isArray:!1},get:{method:"GET",isArray:!0}});return LibraryReadingResource}),app.factory("LibraryResource",function($resource){var LibraryResource=$resource("/api/libraries/:id",{id:"@id"},{update:{method:"PUT",isArray:!1}});return LibraryResource}),app.factory("LibraryResourceSortable",function($resource){var LibraryResourceSortable=$resource("/api/library/sort/:field/:order/:page/:perPage",{_id:"@id"},{update:{method:"PUT",isArray:!1}});return LibraryResourceSortable.prototype.isAdmin=function(){return this.roles&&this.roles.indexOf("admin")>-1},LibraryResourceSortable}),app.factory("LibraryUsersResourceSortable",function($resource){var LibraryUsersResourceSortable=$resource("/api/library/users/:id/:field/:order/:page/:perPage",{_id:"@id"},{update:{method:"PUT",isArray:!1}});return LibraryUsersResourceSortable}),app.factory("notifier",function(toastr){return{success:function(msg){toastr.success(msg)},error:function(msg){toastr.error(msg)}}}),app.factory("ReadingResource",function($resource){var ReadingResource=$resource("/api/library/add-reading/:id",{id:"@id"},{update:{method:"PUT",isArray:!1}});return ReadingResource}),app.factory("ReadingResource2",function($resource){var ReadingResource2=$resource("/api/library/remove-reading/:id",{id:"@id"},{update:{method:"PUT",isArray:!1}});return ReadingResource2}),app.factory("UserReadingResource",function($resource){var UserReadingResource=$resource("/api/all-readings/:libraryID/:userID",{id:"@id"},{update:{method:"PUT",isArray:!1}});return UserReadingResource}),app.factory("UserResource",function($resource){var UserResource=$resource("/api/userInfo/:id",{_id:"@id"},{update:{method:"PUT",isArray:!1}});return UserResource.prototype.isAdmin=function(){return this.roles&&this.roles.indexOf("admin")>-1},UserResource}),app.factory("UsersResource",function($resource){var UsersResource=$resource("/api/users/:id",{_id:"@id"},{update:{method:"PUT",isArray:!1}});return UsersResource.prototype.isAdmin=function(){return this.roles&&this.roles.indexOf("admin")>-1},UsersResource.prototype.isLibrarian=function(){return this.roles&&this.roles.indexOf("librarian")>-1},UsersResource.prototype.isLibraryOwner=function(){return this.roles&&this.roles.indexOf("libraryOwner")>-1},UsersResource.prototype.isAdminOrLibrarian=function(){return this.roles&&this.roles.indexOf("admin")>-1?!0:this.roles&&this.roles.indexOf("librarian")>-1?!0:this.roles&&this.roles.indexOf("libraryOwner")>-1?!0:!1},UsersResource.prototype.hasLibraryPanel=function(){return this.roles&&this.roles.indexOf("librarian")>-1?!0:this.roles&&this.roles.indexOf("libraryOwner")>-1?!0:!1},UsersResource}),app.factory("UsersResourceSortable",function($resource){var UsersResourceSortable=$resource("/api/users/sort/:field/:order/:page/:perPage",{_id:"@id"},{update:{method:"PUT",isArray:!1}});return UsersResourceSortable.prototype.isAdmin=function(){return this.roles&&this.roles.indexOf("admin")>-1},UsersResourceSortable});